###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        18/Jul/2019  11:15:34
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\Middlewares\ST\STM32_USB_Host_Library\Core\Src\usbh_pipes.c
#    Command line =  
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\Middlewares\ST\STM32_USB_Host_Library\Core\Src\usbh_pipes.c
#        -D USE_HAL_DRIVER -D STM32F407xx -D STM32F40_41xxx -D USE_HAL_LIB -D
#        MKS_DLP_BOARD -D TFT35 -lC
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM\mksDLP/List\ -lA
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM\mksDLP/List\
#        --diag_suppress Pa050 -o
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM\mksDLP/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4F -e --char_is_signed --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Inc\ -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Src\ -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/BSP/Components/ssd2828\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/libstmf4\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/ConvertColor\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/ConvertMono\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/Core\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/Font\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/AntiAlias\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/GUIDemo\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/LCDDriver\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/MemDev\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/MultiLayer\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/Widget\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/WM\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI_X\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/Config\
#        -I E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../User/ui\ -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../User/ui/Multi_language\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM\mksDLP/List\usbh_pipes.lst
#    Object file  =  
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM\mksDLP/Obj\usbh_pipes.o
#
###############################################################################

E:\DLP_Proj\DLP_source\branches\DLP_opensource\Middlewares\ST\STM32_USB_Host_Library\Core\Src\usbh_pipes.c
      1          /**
      2            ******************************************************************************
      3            * @file    usbh_pipes.c
      4            * @author  MCD Application Team
      5            * @version V3.2.2
      6            * @date    07-July-2015
      7            * @brief   This file implements functions for opening and closing Pipes
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2015 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */ 
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include "usbh_pipes.h"
     30          
     31          /** @addtogroup USBH_LIB
     32            * @{
     33            */
     34          
     35          /** @addtogroup USBH_LIB_CORE
     36          * @{
     37          */
     38            
     39          /** @defgroup USBH_PIPES
     40            * @brief This file includes opening and closing Pipes
     41            * @{
     42            */ 
     43          
     44          /** @defgroup USBH_PIPES_Private_Defines
     45            * @{
     46            */ 
     47          /**
     48            * @}
     49            */ 
     50          
     51          /** @defgroup USBH_PIPES_Private_TypesDefinitions
     52            * @{
     53            */ 
     54          /**
     55            * @}
     56            */ 
     57          
     58          
     59          /** @defgroup USBH_PIPES_Private_Macros
     60            * @{
     61            */ 
     62          /**
     63            * @}
     64            */ 
     65          
     66          
     67          /** @defgroup USBH_PIPES_Private_Variables
     68            * @{
     69            */ 
     70          
     71          /**
     72            * @}
     73            */ 
     74          
     75          
     76          /** @defgroup USBH_PIPES_Private_Functions
     77            * @{
     78            */ 
     79          static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost);
     80          
     81          
     82          /**
     83            * @brief  USBH_Open_Pipe
     84            *         Open a  pipe
     85            * @param  phost: Host Handle
     86            * @param  pipe_num: Pipe Number
     87            * @param  dev_address: USB Device address allocated to attached device
     88            * @param  speed : USB device speed (Full/Low)
     89            * @param  ep_type: end point type (Bulk/int/ctl)
     90            * @param  mps: max pkt size
     91            * @retval USBH Status
     92            */

   \                                 In section .text, align 2, keep-with-next
     93          USBH_StatusTypeDef USBH_OpenPipe  (USBH_HandleTypeDef *phost,
     94                                      uint8_t pipe_num,
     95                                      uint8_t epnum,
     96                                      uint8_t dev_address,
     97                                      uint8_t speed,
     98                                      uint8_t ep_type,
     99                                      uint16_t mps)
    100          {
   \                     USBH_OpenPipe: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
    101          
    102            USBH_LL_OpenPipe(phost,
    103                                  pipe_num,
    104                                  epnum,
    105                                  dev_address,
    106                                  speed,
    107                                  ep_type,
    108                                  mps);
   \   00000004   0x9C08             LDR      R4,[SP, #+32]
   \   00000006   0x9402             STR      R4,[SP, #+8]
   \   00000008   0x9C07             LDR      R4,[SP, #+28]
   \   0000000A   0x9401             STR      R4,[SP, #+4]
   \   0000000C   0x9C06             LDR      R4,[SP, #+24]
   \   0000000E   0x9400             STR      R4,[SP, #+0]
   \   00000010   0x.... 0x....      BL       USBH_LL_OpenPipe
    109            
    110            return USBH_OK; 
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xB004             ADD      SP,SP,#+16
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    111          
    112          }
    113          
    114          /**
    115            * @brief  USBH_ClosePipe
    116            *         Close a  pipe
    117            * @param  phost: Host Handle
    118            * @param  pipe_num: Pipe Number
    119            * @retval USBH Status
    120            */

   \                                 In section .text, align 2, keep-with-next
    121          USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
    122                                      uint8_t pipe_num)
    123          {
   \                     USBH_ClosePipe: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    124          
    125            USBH_LL_ClosePipe(phost, pipe_num);
   \   00000002   0x.... 0x....      BL       USBH_LL_ClosePipe
    126            
    127            return USBH_OK; 
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xBD02             POP      {R1,PC}          ;; return
    128          
    129          }
    130          
    131          /**
    132            * @brief  USBH_Alloc_Pipe
    133            *         Allocate a new Pipe
    134            * @param  phost: Host Handle
    135            * @param  ep_addr: End point for which the Pipe to be allocated
    136            * @retval Pipe number
    137            */

   \                                 In section .text, align 2, keep-with-next
    138          uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
    139          {
   \                     USBH_AllocPipe: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    140            uint16_t pipe;
    141            
    142            pipe =  USBH_GetFreePipe(phost);
   \   00000006   0x.... 0x....      BL       USBH_GetFreePipe
    143          
    144            if (pipe != 0xFFFF)
   \   0000000A   0xF64F 0x71FF      MOVW     R1,#+65535
   \   0000000E   0x4288             CMP      R0,R1
   \   00000010   0xD005             BEQ.N    ??USBH_AllocPipe_0
    145            {
    146          	phost->Pipes[pipe] = 0x8000 | ep_addr;
   \   00000012   0xF445 0x4100      ORR      R1,R5,#0x8000
   \   00000016   0xEB04 0x0280      ADD      R2,R4,R0, LSL #+2
   \   0000001A   0xF8C2 0x137C      STR      R1,[R2, #+892]
    147            }
    148            return pipe;
   \                     ??USBH_AllocPipe_0: (+1)
   \   0000001E   0xB2C0             UXTB     R0,R0
   \   00000020   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    149          }
    150          
    151          /**
    152            * @brief  USBH_Free_Pipe
    153            *         Free the USB Pipe
    154            * @param  phost: Host Handle
    155            * @param  idx: Pipe number to be freed 
    156            * @retval USBH Status
    157            */

   \                                 In section .text, align 2, keep-with-next
    158          USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
    159          {
    160             if(idx < 11)
   \                     USBH_FreePipe: (+1)
   \   00000000   0x290B             CMP      R1,#+11
   \   00000002   0xDA07             BGE.N    ??USBH_FreePipe_0
    161             {
    162          	 phost->Pipes[idx] &= 0x7FFF;
   \   00000004   0xEB00 0x0081      ADD      R0,R0,R1, LSL #+2
   \   00000008   0xF8D0 0x137C      LDR      R1,[R0, #+892]
   \   0000000C   0x0449             LSLS     R1,R1,#+17
   \   0000000E   0x0C49             LSRS     R1,R1,#+17
   \   00000010   0xF8C0 0x137C      STR      R1,[R0, #+892]
    163             }
    164             return USBH_OK;
   \                     ??USBH_FreePipe_0: (+1)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x4770             BX       LR               ;; return
    165          }
    166          
    167          /**
    168            * @brief  USBH_GetFreePipe
    169            * @param  phost: Host Handle
    170            *         Get a free Pipe number for allocation to a device endpoint
    171            * @retval idx: Free Pipe number
    172            */

   \                                 In section .text, align 2, keep-with-next
    173          static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
    174          {
    175            uint8_t idx = 0;
   \                     USBH_GetFreePipe: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
    176            
    177            for (idx = 0 ; idx < 11 ; idx++)
   \   00000002   0xE000             B.N      ??USBH_GetFreePipe_0
   \                     ??USBH_GetFreePipe_1: (+1)
   \   00000004   0x1C49             ADDS     R1,R1,#+1
   \                     ??USBH_GetFreePipe_0: (+1)
   \   00000006   0xB2C9             UXTB     R1,R1
   \   00000008   0x460A             MOV      R2,R1
   \   0000000A   0x2A0B             CMP      R2,#+11
   \   0000000C   0xDA07             BGE.N    ??USBH_GetFreePipe_2
    178            {
    179          	if ((phost->Pipes[idx] & 0x8000) == 0)
   \   0000000E   0xEB00 0x0282      ADD      R2,R0,R2, LSL #+2
   \   00000012   0xF8D2 0x237C      LDR      R2,[R2, #+892]
   \   00000016   0x0412             LSLS     R2,R2,#+16
   \   00000018   0xD4F4             BMI.N    ??USBH_GetFreePipe_1
    180          	{
    181          	   return idx;
   \   0000001A   0x4608             MOV      R0,R1
   \   0000001C   0x4770             BX       LR
    182          	} 
    183            }
    184            return 0xFFFF;
   \                     ??USBH_GetFreePipe_2: (+1)
   \   0000001E   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000022   0x4770             BX       LR               ;; return
    185          }
    186          /**
    187          * @}
    188          */ 
    189          
    190          /**
    191          * @}
    192          */ 
    193          
    194          /**
    195          * @}
    196          */
    197          
    198          /**
    199          * @}
    200          */ 
    201          
    202          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
    203          
    204          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   USBH_AllocPipe
        16   -> USBH_GetFreePipe
       8   USBH_ClosePipe
         8   -> USBH_LL_ClosePipe
       0   USBH_FreePipe
       0   USBH_GetFreePipe
      24   USBH_OpenPipe
        24   -> USBH_LL_OpenPipe


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      34  USBH_AllocPipe
      10  USBH_ClosePipe
      24  USBH_FreePipe
      36  USBH_GetFreePipe
      26  USBH_OpenPipe

 
 130 bytes in section .text
 
 130 bytes of CODE memory

Errors: none
Warnings: none
