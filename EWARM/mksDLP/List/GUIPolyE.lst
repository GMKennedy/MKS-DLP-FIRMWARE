###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        18/Jul/2019  10:58:23
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\Middlewares\gui\GUI\Core\GUIPolyE.c
#    Command line =  
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\Middlewares\gui\GUI\Core\GUIPolyE.c
#        -D USE_HAL_DRIVER -D STM32F407xx -D STM32F40_41xxx -D USE_HAL_LIB -D
#        MKS_DLP_BOARD -D TFT35 -lC
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM\mksDLP/List\ -lA
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM\mksDLP/List\
#        --diag_suppress Pa050 -o
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM\mksDLP/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4F -e --char_is_signed --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Inc\ -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Src\ -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/BSP/Components/ssd2828\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/libstmf4\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/ConvertColor\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/ConvertMono\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/Core\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/Font\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/AntiAlias\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/GUIDemo\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/LCDDriver\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/MemDev\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/MultiLayer\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/Widget\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/WM\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI_X\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/Config\
#        -I E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../User/ui\ -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../User/ui/Multi_language\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM\mksDLP/List\GUIPolyE.lst
#    Object file  =  
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM\mksDLP/Obj\GUIPolyE.o
#
###############################################################################

E:\DLP_Proj\DLP_source\branches\DLP_opensource\Middlewares\gui\GUI\Core\GUIPolyE.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              µC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : GUIPolyE.c
     16          Purpose     : Polygon enlarge
     17          ----------------------------------------------------------------------
     18          */
     19          
     20          #include <math.h>
     21          #include "GUI.h"
     22          #include "GUIDebug.h"
     23          
     24          /*********************************************************************
     25          *
     26          *       Types
     27          *
     28          **********************************************************************
     29          */
     30          
     31          typedef struct {
     32            float x, y;
     33          } tfPoint;
     34          
     35          /*********************************************************************
     36          *
     37          *       Static code
     38          *
     39          **********************************************************************
     40          */
     41          /*********************************************************************
     42          *
     43          *       _fround
     44          */

   \                                 In section .text, align 2, keep-with-next
     45          static int _fround(float f) {
   \                     _fround: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0xEEB0 0x8A40      VMOV.F32 S16,S0
     46            if (f>0)
   \   0000000A   0xEE18 0x0A10      VMOV     R0,S16
   \   0000000E   0x.... 0x....      BL       __aeabi_f2d
   \   00000012   0xEC41 0x0B10      VMOV     D0,R0,R1
   \   00000016   0xEEB5 0x8A40      VCMP.F32 S16,#0.0
   \   0000001A   0xEEF1 0xFA10      FMSTAT   
   \   0000001E   0xEC53 0x2B10      VMOV     R2,R3,D0
   \   00000022   0xDD09             BLE.N    ??_fround_0
     47              return f+0.5;
                            ^
Warning[Pa093]: implicit conversion from floating point to integer
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x....             LDR.N    R1,??DataTable0  ;; 0x3fe00000
   \   00000028   0x.... 0x....      BL       __aeabi_dadd
   \   0000002C   0xECBD 0x8B02      VPOP     {D8}
   \   00000030   0xE8BD 0x4004      POP      {R2,LR}
   \   00000034   0x.... 0x....      B.W      __aeabi_d2iz
     48            return f-0.5;
                          ^
Warning[Pa093]: implicit conversion from floating point to integer
   \                     ??_fround_0: (+1)
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x....             LDR.N    R1,??DataTable0_1  ;; 0xbfe00000
   \   0000003C   0x.... 0x....      BL       __aeabi_dadd
   \   00000040   0xECBD 0x8B02      VPOP     {D8}
   \   00000044   0xE8BD 0x4004      POP      {R2,LR}
   \   00000048   0x.... 0x....      B.W      __aeabi_d2iz
     49          }
     50          
     51          /*********************************************************************
     52          *
     53          *       _Normalize
     54          */

   \                                 In section .text, align 2, keep-with-next
     55          static void _Normalize(tfPoint* pfPoint) {
   \                     _Normalize: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0x4604             MOV      R4,R0
     56            float fx = pfPoint->x;
   \   00000008   0xED94 0x8A00      VLDR     S16,[R4, #0]
     57            float fy = pfPoint->y;
   \   0000000C   0xEDD4 0x8A01      VLDR     S17,[R4, #+4]
     58            float r = sqrt(fx*fx + fy*fy);
   \   00000010   0xEE28 0x0A08      VMUL.F32 S0,S16,S16
   \   00000014   0xEE08 0x0AA8      VMLA.F32 S0,S17,S17
   \   00000018   0xEE10 0x0A10      VMOV     R0,S0
   \   0000001C   0x.... 0x....      BL       __aeabi_f2d
   \   00000020   0xEC41 0x0B10      VMOV     D0,R0,R1
   \   00000024   0x.... 0x....      BL       sqrt
   \   00000028   0xEC51 0x0B10      VMOV     R0,R1,D0
   \   0000002C   0x.... 0x....      BL       __aeabi_d2f
   \   00000030   0xEE00 0x0A10      VMOV     S0,R0
     59            if (r > 0) {
   \   00000034   0xEEB5 0x0A40      VCMP.F32 S0,#0.0
   \   00000038   0xEEF1 0xFA10      FMSTAT   
   \   0000003C   0xDD07             BLE.N    ??_Normalize_0
     60              pfPoint->x = fx/r;
   \   0000003E   0xEEC8 0x0A00      VDIV.F32 S1,S16,S0
   \   00000042   0xEDC4 0x0A00      VSTR     S1,[R4, #0]
     61              pfPoint->y = fy/r;
   \   00000046   0xEE88 0x0A80      VDIV.F32 S0,S17,S0
   \   0000004A   0xED84 0x0A01      VSTR     S0,[R4, #+4]
     62            }
     63          }
   \                     ??_Normalize_0: (+1)
   \   0000004E   0xECBD 0x8B02      VPOP     {D8}
   \   00000052   0xBD10             POP      {R4,PC}          ;; return
     64          
     65          /*********************************************************************
     66          *
     67          *       _ReverseLen
     68          */

   \                                 In section .text, align 2, keep-with-next
     69          static void _ReverseLen(tfPoint* pfPoint) {
   \                     _ReverseLen: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xED2D 0x8B02      VPUSH    {D8}
   \   00000006   0x4604             MOV      R4,R0
     70            float fx = pfPoint->x;
   \   00000008   0xED94 0x8A00      VLDR     S16,[R4, #0]
     71            float fy = pfPoint->y;
   \   0000000C   0xEDD4 0x8A01      VLDR     S17,[R4, #+4]
     72            float r = sqrt(fx*fx/2 + fy*fy/2);
   \   00000010   0xEEB6 0x0A00      VMOV.F32 S0,#0.5
   \   00000014   0xEE68 0x0A08      VMUL.F32 S1,S16,S16
   \   00000018   0xEE60 0x0A80      VMUL.F32 S1,S1,S0
   \   0000001C   0xEE28 0x1AA8      VMUL.F32 S2,S17,S17
   \   00000020   0xEE41 0x0A00      VMLA.F32 S1,S2,S0
   \   00000024   0xEE10 0x0A90      VMOV     R0,S1
   \   00000028   0x.... 0x....      BL       __aeabi_f2d
   \   0000002C   0xEC41 0x0B10      VMOV     D0,R0,R1
   \   00000030   0x.... 0x....      BL       sqrt
   \   00000034   0xEC51 0x0B10      VMOV     R0,R1,D0
   \   00000038   0x.... 0x....      BL       __aeabi_d2f
   \   0000003C   0xEE00 0x0A10      VMOV     S0,R0
     73            if (r > 0) {
   \   00000040   0xEEB5 0x0A40      VCMP.F32 S0,#0.0
   \   00000044   0xEEF1 0xFA10      FMSTAT   
   \   00000048   0xDD0B             BLE.N    ??_ReverseLen_0
     74              pfPoint->x = fx/r/r;
   \   0000004A   0xEEC8 0x0A00      VDIV.F32 S1,S16,S0
   \   0000004E   0xEEC0 0x0A80      VDIV.F32 S1,S1,S0
   \   00000052   0xEDC4 0x0A00      VSTR     S1,[R4, #0]
     75              pfPoint->y = fy/r/r;
   \   00000056   0xEEC8 0x0A80      VDIV.F32 S1,S17,S0
   \   0000005A   0xEE80 0x0A80      VDIV.F32 S0,S1,S0
   \   0000005E   0xED84 0x0A01      VSTR     S0,[R4, #+4]
     76            }
     77          }
   \                     ??_ReverseLen_0: (+1)
   \   00000062   0xECBD 0x8B02      VPOP     {D8}
   \   00000066   0xBD10             POP      {R4,PC}          ;; return
     78          
     79          /*********************************************************************
     80          *
     81          *       _GetVect
     82          */

   \                                 In section .text, align 2, keep-with-next
     83          static void _GetVect(tfPoint* pfPoint, const GUI_POINT* pSrc, int NumPoints, int Index) {
   \                     _GetVect: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
     84            int Off0 = (Index + NumPoints-1) % NumPoints;
   \   00000002   0x18D4             ADDS     R4,R2,R3
   \   00000004   0x1E64             SUBS     R4,R4,#+1
   \   00000006   0xFB94 0xF5F2      SDIV     R5,R4,R2
   \   0000000A   0xFB02 0x4415      MLS      R4,R2,R5,R4
     85            int Off1 = Index % NumPoints;
   \   0000000E   0xFB93 0xF5F2      SDIV     R5,R3,R2
   \   00000012   0xFB02 0x3215      MLS      R2,R2,R5,R3
     86            pfPoint->x = pSrc[Off1].x - pSrc[Off0].x; 
   \   00000016   0xF931 0x3022      LDRSH    R3,[R1, R2, LSL #+2]
   \   0000001A   0xF931 0x5024      LDRSH    R5,[R1, R4, LSL #+2]
   \   0000001E   0x1B5B             SUBS     R3,R3,R5
   \   00000020   0xEE00 0x3A10      VMOV     S0,R3
   \   00000024   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000028   0xED80 0x0A00      VSTR     S0,[R0, #0]
     87            pfPoint->y = pSrc[Off1].y - pSrc[Off0].y; 
   \   0000002C   0xEB01 0x0282      ADD      R2,R1,R2, LSL #+2
   \   00000030   0xF9B2 0x2002      LDRSH    R2,[R2, #+2]
   \   00000034   0xEB01 0x0184      ADD      R1,R1,R4, LSL #+2
   \   00000038   0xF9B1 0x1002      LDRSH    R1,[R1, #+2]
   \   0000003C   0x1A51             SUBS     R1,R2,R1
   \   0000003E   0xEE00 0x1A10      VMOV     S0,R1
   \   00000042   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000046   0xED80 0x0A01      VSTR     S0,[R0, #+4]
     88          }
   \   0000004A   0xBC30             POP      {R4,R5}
   \   0000004C   0x4770             BX       LR               ;; return
     89          
     90          /*********************************************************************
     91          *
     92          *       Public code
     93          *
     94          **********************************************************************
     95          */
     96          /*********************************************************************
     97          *
     98          *       GUI_EnlargePolygon
     99          */
    100          #if 0
    101          void GUI_EnlargePolygon(GUI_POINT* pDest, const GUI_POINT* pSrc, int NumPoints, int Len) {
    102            int j;
    103            /* Calc destination points */
    104            for (j=0; j<NumPoints; j++) {
    105              int x, y;
    106              tfPoint aVect[2];
    107              /* Get the vectors */
    108              _GetVect(&aVect[0], pSrc, NumPoints, j);
    109              _GetVect(&aVect[1], pSrc, NumPoints, j+1);
    110              /* Normalize the vectors and add vectors */
    111              _Normalize(&aVect[0]);
    112              _Normalize(&aVect[1]);
    113              aVect[0].x += aVect[1].x;
    114              aVect[0].y += aVect[1].y;
    115              /* Resulting vector needs to be normalized again */
    116              _Normalize(&aVect[0]);
    117              x =  _fround(aVect[0].y * Len);
    118              y = -_fround(aVect[0].x * Len);
    119              /* Store destination */
    120              (pDest+j)->x = (pSrc+j)->x + x;
    121              (pDest+j)->y = (pSrc+j)->y + y;
    122            }
    123          }
    124          
    125          #else
    126          

   \                                 In section .text, align 2, keep-with-next
    127          void GUI_EnlargePolygon(GUI_POINT* pDest, const GUI_POINT* pSrc, int NumPoints, int Len) {
   \                     GUI_EnlargePolygon: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0xED2D 0x8B02      VPUSH    {D8}
   \   00000008   0xB084             SUB      SP,SP,#+16
   \   0000000A   0x4604             MOV      R4,R0
   \   0000000C   0x460D             MOV      R5,R1
   \   0000000E   0x4616             MOV      R6,R2
   \   00000010   0xEE08 0x3A10      VMOV     S16,R3
    128            int j;
    129            /* Calc destination points */
    130            for (j=0; j<NumPoints; j++) {
   \   00000014   0x2700             MOVS     R7,#+0
   \   00000016   0xE045             B.N      ??GUI_EnlargePolygon_0
    131              int x, y;
    132              tfPoint aVect[2];
    133              /* Get the vectors */
    134              _GetVect(&aVect[0], pSrc, NumPoints, j);
   \                     ??GUI_EnlargePolygon_1: (+1)
   \   00000018   0x463B             MOV      R3,R7
   \   0000001A   0x4632             MOV      R2,R6
   \   0000001C   0x4629             MOV      R1,R5
   \   0000001E   0xA800             ADD      R0,SP,#+0
   \   00000020   0x.... 0x....      BL       _GetVect
    135              _GetVect(&aVect[1], pSrc, NumPoints, j+1);
   \   00000024   0xF107 0x0801      ADD      R8,R7,#+1
   \   00000028   0x4643             MOV      R3,R8
   \   0000002A   0x4632             MOV      R2,R6
   \   0000002C   0x4629             MOV      R1,R5
   \   0000002E   0xA802             ADD      R0,SP,#+8
   \   00000030   0x.... 0x....      BL       _GetVect
    136              /* Normalize the vectors and add vectors */
    137              _Normalize(&aVect[0]);
   \   00000034   0xA800             ADD      R0,SP,#+0
   \   00000036   0x.... 0x....      BL       _Normalize
    138              _Normalize(&aVect[1]);
   \   0000003A   0xA802             ADD      R0,SP,#+8
   \   0000003C   0x.... 0x....      BL       _Normalize
    139              aVect[0].x += aVect[1].x;
   \   00000040   0xF10D 0x0900      ADD      R9,SP,#+0
   \   00000044   0xED9D 0x0A00      VLDR     S0,[SP, #+0]
   \   00000048   0xEDD9 0x0A02      VLDR     S1,[R9, #+8]
   \   0000004C   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   00000050   0xED8D 0x0A00      VSTR     S0,[SP, #+0]
    140              aVect[0].y += aVect[1].y;
   \   00000054   0xED99 0x0A01      VLDR     S0,[R9, #+4]
   \   00000058   0xEDDD 0x0A03      VLDR     S1,[SP, #+12]
   \   0000005C   0xEE30 0x0A20      VADD.F32 S0,S0,S1
   \   00000060   0xED89 0x0A01      VSTR     S0,[R9, #+4]
    141              /* Resulting vector needs to be normalized again */
    142              _ReverseLen(&aVect[0]);
   \   00000064   0xA800             ADD      R0,SP,#+0
   \   00000066   0x.... 0x....      BL       _ReverseLen
    143              x =  _fround(aVect[0].y * Len);
   \   0000006A   0xEEF8 0x8AC8      VCVT.F32.S32 S17,S16
   \   0000006E   0xED99 0x0A01      VLDR     S0,[R9, #+4]
   \   00000072   0xEE28 0x0A80      VMUL.F32 S0,S17,S0
   \   00000076   0x.... 0x....      BL       _fround
   \   0000007A   0x4681             MOV      R9,R0
    144              y = -_fround(aVect[0].x * Len);
   \   0000007C   0xED9D 0x0A00      VLDR     S0,[SP, #+0]
   \   00000080   0xEE28 0x0A80      VMUL.F32 S0,S17,S0
   \   00000084   0x.... 0x....      BL       _fround
   \   00000088   0x4240             RSBS     R0,R0,#+0
    145              /* Store destination */
    146              (pDest+j)->x = (pSrc+j)->x + x;
   \   0000008A   0xF835 0x1027      LDRH     R1,[R5, R7, LSL #+2]
   \   0000008E   0x4449             ADD      R1,R9,R1
   \   00000090   0xF824 0x1027      STRH     R1,[R4, R7, LSL #+2]
    147              (pDest+j)->y = (pSrc+j)->y + y;
   \   00000094   0xEB05 0x0187      ADD      R1,R5,R7, LSL #+2
   \   00000098   0x8849             LDRH     R1,[R1, #+2]
   \   0000009A   0x1840             ADDS     R0,R0,R1
   \   0000009C   0xEB04 0x0187      ADD      R1,R4,R7, LSL #+2
   \   000000A0   0x8048             STRH     R0,[R1, #+2]
    148            }
   \   000000A2   0x4647             MOV      R7,R8
   \                     ??GUI_EnlargePolygon_0: (+1)
   \   000000A4   0x42B7             CMP      R7,R6
   \   000000A6   0xDBB7             BLT.N    ??GUI_EnlargePolygon_1
    149          }
   \   000000A8   0xB004             ADD      SP,SP,#+16
   \   000000AA   0xECBD 0x8B02      VPOP     {D8}
   \   000000AE   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x3FE00000         DC32     0x3fe00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0xBFE00000         DC32     0xbfe00000
    150          #endif
    151          
    152          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      56   GUI_EnlargePolygon
        56   -> _GetVect
        56   -> _Normalize
        56   -> _ReverseLen
        56   -> _fround
       8   _GetVect
      16   _Normalize
        16   -> __aeabi_d2f
        16   -> __aeabi_f2d
        16   -> sqrt
      16   _ReverseLen
        16   -> __aeabi_d2f
        16   -> __aeabi_f2d
        16   -> sqrt
      16   _fround
         0   -> __aeabi_d2iz
        16   -> __aeabi_dadd
        16   -> __aeabi_f2d


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
     178  GUI_EnlargePolygon
      78  _GetVect
      84  _Normalize
     104  _ReverseLen
      76  _fround

 
 528 bytes in section .text
 
 528 bytes of CODE memory

Errors: none
Warnings: 2
