###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        18/Jul/2019  10:57:50
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\Middlewares\gui\GUI\Widget\EDITFloat.c
#    Command line =  
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\Middlewares\gui\GUI\Widget\EDITFloat.c
#        -D USE_HAL_DRIVER -D STM32F407xx -D STM32F40_41xxx -D USE_HAL_LIB -D
#        MKS_DLP_BOARD -D TFT35 -lC
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM\mksDLP/List\ -lA
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM\mksDLP/List\
#        --diag_suppress Pa050 -o
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM\mksDLP/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4F -e --char_is_signed --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Inc\ -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Src\ -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/BSP/Components/ssd2828\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/libstmf4\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/ConvertColor\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/ConvertMono\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/Core\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/Font\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/AntiAlias\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/GUIDemo\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/LCDDriver\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/MemDev\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/MultiLayer\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/Widget\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/WM\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI_X\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/Config\
#        -I E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../User/ui\ -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../User/ui/Multi_language\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM\mksDLP/List\EDITFloat.lst
#    Object file  =  
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM\mksDLP/Obj\EDITFloat.o
#
###############################################################################

E:\DLP_Proj\DLP_source\branches\DLP_opensource\Middlewares\gui\GUI\Widget\EDITFloat.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              µC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : EditDec
     16          Purpose     : Edit decimal values
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          #include <math.h>
     21          
     22          #include "EDIT.h"
     23          #include "GUIDebug.h"
     24          #include "GUI_Protected.h"
     25          #include "EDIT_Private.h"
     26          
     27          #if GUI_WINSUPPORT
     28          
     29          /*********************************************************************
     30          *
     31          *             Exported routines
     32          *
     33          **********************************************************************
     34          */
     35          /*********************************************************************
     36          *
     37          *       EDIT_SetFloatMode
     38          */

   \                                 In section .text, align 4, keep-with-next
     39          void EDIT_SetFloatMode(EDIT_Handle hEdit, float Value, float Min, float Max, int Shift, U8 Flags) {
   \                     EDIT_SetFloatMode: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xED2D 0x8B06      VPUSH    {D8-D10}
   \   00000008   0xB082             SUB      SP,SP,#+8
   \   0000000A   0x4604             MOV      R4,R0
   \   0000000C   0xEEB0 0x8A60      VMOV.F32 S16,S1
   \   00000010   0xEEF0 0x8A41      VMOV.F32 S17,S2
   \   00000014   0x460D             MOV      R5,R1
   \   00000016   0x4690             MOV      R8,R2
     40            I32 _Value, _Min, _Max;
     41            float Scale;
     42            if (hEdit) {
   \   00000018   0x2C00             CMP      R4,#+0
   \   0000001A   0xD04B             BEQ.N    ??EDIT_SetFloatMode_0
     43              WM_LOCK();
     44              Scale  =(float)GUI_Pow10[Shift];
   \   0000001C   0x....             LDR.N    R0,??DataTable2
   \   0000001E   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   00000022   0xEE00 0x0A90      VMOV     S1,R0
   \   00000026   0xEEB8 0xAA60      VCVT.F32.U32 S20,S1
     45              _Value = floor(Scale * Value + 0.5);
                            ^
Warning[Pa093]: implicit conversion from floating point to integer
   \   0000002A   0xED9F 0x....      VLDR.W   D9,??DataTable2_2
   \   0000002E   0xEE2A 0x0A00      VMUL.F32 S0,S20,S0
   \   00000032   0xEE10 0x0A10      VMOV     R0,S0
   \   00000036   0x.... 0x....      BL       __aeabi_f2d
   \   0000003A   0xEC53 0x2B19      VMOV     R2,R3,D9
   \   0000003E   0x.... 0x....      BL       __aeabi_dadd
   \   00000042   0xEC41 0x0B10      VMOV     D0,R0,R1
   \   00000046   0x.... 0x....      BL       floor
   \   0000004A   0xEC51 0x0B10      VMOV     R0,R1,D0
   \   0000004E   0x.... 0x....      BL       __aeabi_d2iz
   \   00000052   0x4606             MOV      R6,R0
     46              _Min   = floor(Scale * Min + 0.5);
                            ^
Warning[Pa093]: implicit conversion from floating point to integer
   \   00000054   0xEE2A 0x0A08      VMUL.F32 S0,S20,S16
   \   00000058   0xEE10 0x0A10      VMOV     R0,S0
   \   0000005C   0x.... 0x....      BL       __aeabi_f2d
   \   00000060   0xEC53 0x2B19      VMOV     R2,R3,D9
   \   00000064   0x.... 0x....      BL       __aeabi_dadd
   \   00000068   0xEC41 0x0B10      VMOV     D0,R0,R1
   \   0000006C   0x.... 0x....      BL       floor
   \   00000070   0xEC51 0x0B10      VMOV     R0,R1,D0
   \   00000074   0x.... 0x....      BL       __aeabi_d2iz
   \   00000078   0x4607             MOV      R7,R0
     47              _Max   = floor(Scale * Max + 0.5);
                            ^
Warning[Pa093]: implicit conversion from floating point to integer
   \   0000007A   0xEE2A 0x0A28      VMUL.F32 S0,S20,S17
   \   0000007E   0xEE10 0x0A10      VMOV     R0,S0
   \   00000082   0x.... 0x....      BL       __aeabi_f2d
   \   00000086   0xEC53 0x2B19      VMOV     R2,R3,D9
   \   0000008A   0x.... 0x....      BL       __aeabi_dadd
   \   0000008E   0xEC41 0x0B10      VMOV     D0,R0,R1
   \   00000092   0x.... 0x....      BL       floor
   \   00000096   0xEC51 0x0B10      VMOV     R0,R1,D0
   \   0000009A   0x.... 0x....      BL       __aeabi_d2iz
     48              EDIT_SetDecMode(hEdit, _Value, _Min, _Max, Shift, Flags);
   \   0000009E   0xFA5F 0xF888      UXTB     R8,R8
   \   000000A2   0xF8CD 0x8004      STR      R8,[SP, #+4]
   \   000000A6   0x9500             STR      R5,[SP, #+0]
   \   000000A8   0x4603             MOV      R3,R0
   \   000000AA   0x463A             MOV      R2,R7
   \   000000AC   0x4631             MOV      R1,R6
   \   000000AE   0x4620             MOV      R0,R4
   \   000000B0   0x.... 0x....      BL       EDIT_SetDecMode
     49              WM_UNLOCK();
     50            }
     51          }
   \                     ??EDIT_SetFloatMode_0: (+1)
   \   000000B4   0xB002             ADD      SP,SP,#+8
   \   000000B6   0xECBD 0x8B06      VPOP     {D8-D10}
   \   000000BA   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
     52          
     53          /*********************************************************************
     54          *
     55          *       EDIT_GetFloatValue
     56          */

   \                                 In section .text, align 4, keep-with-next
     57          float EDIT_GetFloatValue(EDIT_Handle hObj) {
     58            float Value = 0;
   \                     EDIT_GetFloatValue: (+1)
   \   00000000   0xED9F 0x....      VLDR.W   S0,??DataTable2_1  ;; 0x0
     59            if (hObj) {
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD100             BNE.N    ??EDIT_GetFloatValue_0
   \   00000008   0x4770             BX       LR
     60              float Scale;
     61              EDIT_Obj * pObj;
     62              WM_LOCK();
     63              pObj  = EDIT_H2P(hObj);
   \                     ??EDIT_GetFloatValue_0: (+1)
   \   0000000A   0xB580             PUSH     {R7,LR}
   \   0000000C   0x.... 0x....      BL       GUI_ALLOC_h2p
     64              Scale = (float)GUI_Pow10[pObj->NumDecs];
     65              Value = (float)(I32)pObj->CurrentValue / Scale;
   \   00000010   0xED90 0x0A0F      VLDR     S0,[R0, #+60]
   \   00000014   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000018   0xF890 0x0038      LDRB     R0,[R0, #+56]
   \   0000001C   0x....             LDR.N    R1,??DataTable2
   \   0000001E   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   00000022   0xEE00 0x0A90      VMOV     S1,R0
   \   00000026   0xEEF8 0x0A60      VCVT.F32.U32 S1,S1
   \   0000002A   0xEE80 0x0A20      VDIV.F32 S0,S0,S1
     66              WM_UNLOCK();
     67            }
     68            return Value;
   \   0000002E   0xBD01             POP      {R0,PC}          ;; return
     69          }
     70          
     71          /*********************************************************************
     72          *
     73          *       EDIT_SetFloatValue
     74          */

   \                                 In section .text, align 4, keep-with-next
     75          void EDIT_SetFloatValue(EDIT_Handle hObj, float Value) {
   \                     EDIT_SetFloatValue: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xED2D 0x8B04      VPUSH    {D8-D9}
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0xEEB0 0x8A40      VMOV.F32 S16,S0
     76            if (hObj) {
   \   0000000C   0xD028             BEQ.N    ??EDIT_SetFloatValue_0
     77              float Scale;
     78              EDIT_Obj * pObj;
     79              WM_LOCK();
     80              pObj  = EDIT_H2P(hObj);
   \   0000000E   0x.... 0x....      BL       GUI_ALLOC_h2p
     81              Scale = (float)GUI_Pow10[pObj->NumDecs];
     82              Value *= Scale;
   \   00000012   0xF890 0x0038      LDRB     R0,[R0, #+56]
   \   00000016   0x....             LDR.N    R1,??DataTable2
   \   00000018   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   0000001C   0xEE00 0x0A10      VMOV     S0,R0
   \   00000020   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \   00000024   0xEE20 0x8A08      VMUL.F32 S16,S0,S16
     83              EDIT_SetValue(hObj, (I32)(Value + (Value >= 0 ? 0.5 : -0.5)));
   \   00000028   0xEEB5 0x8A40      VCMP.F32 S16,#0.0
   \   0000002C   0xEEF1 0xFA10      FMSTAT   
   \   00000030   0xDB02             BLT.N    ??EDIT_SetFloatValue_1
   \   00000032   0xED9F 0x....      VLDR.W   D9,??DataTable2_2
   \   00000036   0xE001             B.N      ??EDIT_SetFloatValue_2
   \                     ??EDIT_SetFloatValue_1: (+1)
   \   00000038   0xED9F 0x....      VLDR.W   D9,??DataTable2_3
   \                     ??EDIT_SetFloatValue_2: (+1)
   \   0000003C   0xEE18 0x0A10      VMOV     R0,S16
   \   00000040   0x.... 0x....      BL       __aeabi_f2d
   \   00000044   0xEC53 0x2B19      VMOV     R2,R3,D9
   \   00000048   0x.... 0x....      BL       __aeabi_dadd
   \   0000004C   0x.... 0x....      BL       __aeabi_d2iz
   \   00000050   0x4601             MOV      R1,R0
   \   00000052   0x4620             MOV      R0,R4
   \   00000054   0xECBD 0x8B04      VPOP     {D8-D9}
   \   00000058   0xE8BD 0x4010      POP      {R4,LR}
   \   0000005C   0x.... 0x....      B.W      EDIT_SetValue
     84              WM_UNLOCK();
     85            }
     86          }
   \                     ??EDIT_SetFloatValue_0: (+1)
   \   00000060   0xECBD 0x8B04      VPOP     {D8-D9}
   \   00000064   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     GUI_Pow10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x00000000         DC32     0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x00000000         DC32     0x0,0x3FE00000
   \              0x3FE00000   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x00000000         DC32     0x0,0xBFE00000
   \              0xBFE00000   
     87          
     88          #else  /* avoid empty object files */
     89          
     90          void EditFloat_C(void);
     91          void EditFloat_C(void){}
     92          
     93          #endif /* GUI_WINSUPPORT */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   EDIT_GetFloatValue
         8   -> GUI_ALLOC_h2p
      56   EDIT_SetFloatMode
        56   -> EDIT_SetDecMode
        56   -> __aeabi_d2iz
        56   -> __aeabi_dadd
        56   -> __aeabi_f2d
        56   -> floor
      24   EDIT_SetFloatValue
         0   -> EDIT_SetValue
        24   -> GUI_ALLOC_h2p
        24   -> __aeabi_d2iz
        24   -> __aeabi_dadd
        24   -> __aeabi_f2d


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       8  ??DataTable2_2
       8  ??DataTable2_3
      48  EDIT_GetFloatValue
     190  EDIT_SetFloatMode
     102  EDIT_SetFloatValue

 
 364 bytes in section .text
 
 364 bytes of CODE memory

Errors: none
Warnings: 3
