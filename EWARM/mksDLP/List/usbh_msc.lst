###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        18/Jul/2019  11:15:33
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\Middlewares\ST\STM32_USB_Host_Library\Class\MSC\Src\usbh_msc.c
#    Command line =  
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\Middlewares\ST\STM32_USB_Host_Library\Class\MSC\Src\usbh_msc.c
#        -D USE_HAL_DRIVER -D STM32F407xx -D STM32F40_41xxx -D USE_HAL_LIB -D
#        MKS_DLP_BOARD -D TFT35 -lC
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM\mksDLP/List\ -lA
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM\mksDLP/List\
#        --diag_suppress Pa050 -o
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM\mksDLP/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4F -e --char_is_signed --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Inc\ -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Src\ -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/BSP/Components/ssd2828\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/libstmf4\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/ConvertColor\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/ConvertMono\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/Core\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/Font\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/AntiAlias\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/GUIDemo\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/LCDDriver\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/MemDev\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/MultiLayer\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/Widget\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/WM\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI_X\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/Config\
#        -I E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../User/ui\ -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../User/ui/Multi_language\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM\mksDLP/List\usbh_msc.lst
#    Object file  =  
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM\mksDLP/Obj\usbh_msc.o
#
###############################################################################

E:\DLP_Proj\DLP_source\branches\DLP_opensource\Middlewares\ST\STM32_USB_Host_Library\Class\MSC\Src\usbh_msc.c
      1          /**
      2            ******************************************************************************
      3            * @file    usbh_msc.c
      4            * @author  MCD Application Team
      5            * @version V3.2.2
      6            * @date    07-July-2015
      7            * @brief   This file implements the MSC class driver functions
      8            *          ===================================================================      
      9            *                                MSC Class  Description
     10            *          =================================================================== 
     11            *           This module manages the MSC class V1.0 following the "Universal 
     12            *           Serial Bus Mass Storage Class (MSC) Bulk-Only Transport (BOT) Version 1.0
     13            *           Sep. 31, 1999".
     14            *           This driver implements the following aspects of the specification:
     15            *             - Bulk-Only Transport protocol
     16            *             - Subclass : SCSI transparent command set (ref. SCSI Primary Commands - 3 (SPC-3))
     17            *      
     18            *  @endverbatim
     19            *
     20            ******************************************************************************
     21            * @attention
     22            *
     23            * <h2><center>&copy; COPYRIGHT 2015 STMicroelectronics</center></h2>
     24            *
     25            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     26            * You may not use this file except in compliance with the License.
     27            * You may obtain a copy of the License at:
     28            *
     29            *        http://www.st.com/software_license_agreement_liberty_v2
     30            *
     31            * Unless required by applicable law or agreed to in writing, software 
     32            * distributed under the License is distributed on an "AS IS" BASIS, 
     33            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     34            * See the License for the specific language governing permissions and
     35            * limitations under the License.
     36            *
     37            ******************************************************************************
     38            */
     39          
     40          /* Includes ------------------------------------------------------------------*/
     41          
     42          #include "usbh_msc.h"
     43          #include "usbh_msc_bot.h"    
     44          #include "usbh_msc_scsi.h"
     45          
     46          
     47          /** @addtogroup USBH_LIB
     48            * @{
     49            */
     50          
     51          /** @addtogroup USBH_CLASS
     52            * @{
     53            */
     54          
     55          /** @addtogroup USBH_MSC_CLASS
     56            * @{
     57            */
     58            
     59          /** @defgroup USBH_MSC_CORE 
     60            * @brief    This file includes the mass storage related functions
     61            * @{
     62            */ 
     63          
     64          
     65          /** @defgroup USBH_MSC_CORE_Private_TypesDefinitions
     66            * @{
     67            */ 
     68          /**
     69            * @}
     70            */ 
     71          
     72          /** @defgroup USBH_MSC_CORE_Private_Defines
     73            * @{
     74            */ 
     75          /**
     76            * @}
     77            */ 
     78          
     79          /** @defgroup USBH_MSC_CORE_Private_Macros
     80            * @{
     81            */ 
     82          /**
     83            * @}
     84            */ 
     85          
     86          
     87          /** @defgroup USBH_MSC_CORE_Private_Variables
     88            * @{
     89            */ 
     90          /**
     91            * @}
     92            */ 
     93          
     94          
     95          /** @defgroup USBH_MSC_CORE_Private_FunctionPrototypes
     96            * @{
     97            */ 
     98          
     99          static USBH_StatusTypeDef USBH_MSC_InterfaceInit  (USBH_HandleTypeDef *phost);
    100          
    101          static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit  (USBH_HandleTypeDef *phost);
    102          
    103          static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost);
    104          
    105          static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost);
    106          
    107          static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost);
    108          
    109          static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun);
    110          

   \                                 In section .data, align 4
    111          USBH_ClassTypeDef  USBH_msc = 
   \                     USBH_msc:
   \   00000000   0x........         DC32 `?<Constant "MSC">`
   \   00000004   0x08 0x00          DC8 8, 0, 0, 0
   \              0x00 0x00    
   \   00000008   0x........         DC32 USBH_MSC_InterfaceInit, USBH_MSC_InterfaceDeInit
   \              0x........   
   \   00000010   0x........         DC32 USBH_MSC_ClassRequest, USBH_MSC_Process, USBH_MSC_SOFProcess, 0H
   \              0x........   
   \              0x........   
   \              0x00000000   
    112          {
    113            "MSC",
    114            USB_MSC_CLASS,
    115            USBH_MSC_InterfaceInit,
    116            USBH_MSC_InterfaceDeInit,
    117            USBH_MSC_ClassRequest,
    118            USBH_MSC_Process,
    119            USBH_MSC_SOFProcess,
    120            NULL,
    121          };
    122          
    123          
    124          /**
    125            * @}
    126            */ 
    127          
    128          
    129          /** @defgroup USBH_MSC_CORE_Exported_Variables
    130            * @{
    131            */ 
    132          
    133          /**
    134            * @}
    135            */ 
    136          
    137          
    138          /** @defgroup USBH_MSC_CORE_Private_Functions
    139            * @{
    140            */ 
    141          
    142          
    143          /**
    144            * @brief  USBH_MSC_InterfaceInit 
    145            *         The function init the MSC class.
    146            * @param  phost: Host handle
    147            * @retval USBH Status
    148            */

   \                                 In section .text, align 2, keep-with-next
    149          static USBH_StatusTypeDef USBH_MSC_InterfaceInit (USBH_HandleTypeDef *phost)
    150          {	 
   \                     USBH_MSC_InterfaceInit: (+1)
   \   00000000   0xB5FE             PUSH     {R1-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
    151            uint8_t interface = 0; 
    152            USBH_StatusTypeDef status = USBH_FAIL ;
   \   00000004   0x2602             MOVS     R6,#+2
    153            MSC_HandleTypeDef *MSC_Handle;
    154            
    155            interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
   \   00000006   0xF504 0x7547      ADD      R5,R4,#+796
   \   0000000A   0x2350             MOVS     R3,#+80
   \   0000000C   0x2206             MOVS     R2,#+6
   \   0000000E   0x6DA8             LDR      R0,[R5, #+88]
   \   00000010   0x7901             LDRB     R1,[R0, #+4]
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x.... 0x....      BL       USBH_FindInterface
    156            
    157            if(interface == 0xFF) /* Not Valid Interface */
   \   00000018   0x28FF             CMP      R0,#+255
   \   0000001A   0xD079             BEQ.N    ??USBH_MSC_InterfaceInit_0
    158            {
    159              USBH_DbgLog ("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    160              status = USBH_FAIL;      
    161            }
    162            else
    163            {
    164              USBH_SelectInterface (phost, interface);
   \   0000001C   0x4601             MOV      R1,R0
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       USBH_SelectInterface
    165              
    166              phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
   \   00000024   0xF44F 0x7080      MOV      R0,#+256
   \   00000028   0x.... 0x....      BL       malloc
   \   0000002C   0x6DA9             LDR      R1,[R5, #+88]
   \   0000002E   0x61C8             STR      R0,[R1, #+28]
    167              MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
   \   00000030   0x6DA8             LDR      R0,[R5, #+88]
   \   00000032   0x69C6             LDR      R6,[R0, #+28]
    168              
    169              if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
   \   00000034   0x201A             MOVS     R0,#+26
   \   00000036   0x78E9             LDRB     R1,[R5, #+3]
   \   00000038   0xFB10 0x4101      SMLABB   R1,R0,R1,R4
   \   0000003C   0xF891 0x1348      LDRB     R1,[R1, #+840]
   \   00000040   0x1D37             ADDS     R7,R6,#+4
   \   00000042   0x060A             LSLS     R2,R1,#+24
   \   00000044   0xD507             BPL.N    ??USBH_MSC_InterfaceInit_1
    170              {
    171                MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
   \   00000046   0x70F9             STRB     R1,[R7, #+3]
    172                MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
   \   00000048   0x78E9             LDRB     R1,[R5, #+3]
   \   0000004A   0xFB10 0x4101      SMLABB   R1,R0,R1,R4
   \   0000004E   0xF8B1 0x134A      LDRH     R1,[R1, #+842]
   \   00000052   0x80F9             STRH     R1,[R7, #+6]
   \   00000054   0xE006             B.N      ??USBH_MSC_InterfaceInit_2
    173              }
    174              else
    175              {
    176                MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
   \                     ??USBH_MSC_InterfaceInit_1: (+1)
   \   00000056   0x70B9             STRB     R1,[R7, #+2]
    177                MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;      
   \   00000058   0x78E9             LDRB     R1,[R5, #+3]
   \   0000005A   0xFB10 0x4101      SMLABB   R1,R0,R1,R4
   \   0000005E   0xF8B1 0x134A      LDRH     R1,[R1, #+842]
   \   00000062   0x80B9             STRH     R1,[R7, #+4]
   \                     ??USBH_MSC_InterfaceInit_2: (+1)
   \   00000064   0x78E9             LDRB     R1,[R5, #+3]
   \   00000066   0xFB10 0x4101      SMLABB   R1,R0,R1,R4
   \   0000006A   0xF891 0x1350      LDRB     R1,[R1, #+848]
   \   0000006E   0x060A             LSLS     R2,R1,#+24
   \   00000070   0xD507             BPL.N    ??USBH_MSC_InterfaceInit_3
    178              }
    179              
    180              if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
    181              {
    182                MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
   \   00000072   0x70F9             STRB     R1,[R7, #+3]
    183                MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;      
   \   00000074   0x78E9             LDRB     R1,[R5, #+3]
   \   00000076   0xFB10 0x4001      SMLABB   R0,R0,R1,R4
   \   0000007A   0xF8B0 0x0352      LDRH     R0,[R0, #+850]
   \   0000007E   0x80F8             STRH     R0,[R7, #+6]
   \   00000080   0xE006             B.N      ??USBH_MSC_InterfaceInit_4
    184              }
    185              else
    186              {
    187                MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
   \                     ??USBH_MSC_InterfaceInit_3: (+1)
   \   00000082   0x70B9             STRB     R1,[R7, #+2]
    188                MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;      
   \   00000084   0x78E9             LDRB     R1,[R5, #+3]
   \   00000086   0xFB10 0x4001      SMLABB   R0,R0,R1,R4
   \   0000008A   0xF8B0 0x0352      LDRH     R0,[R0, #+850]
   \   0000008E   0x80B8             STRH     R0,[R7, #+4]
    189              }
    190              
    191              MSC_Handle->current_lun = 0;
   \                     ??USBH_MSC_InterfaceInit_4: (+1)
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0xF8A6 0x00F8      STRH     R0,[R6, #+248]
    192              MSC_Handle->rw_lun = 0;
   \   00000096   0xF8A6 0x00FA      STRH     R0,[R6, #+250]
    193              MSC_Handle->state = MSC_INIT;
   \   0000009A   0x7238             STRB     R0,[R7, #+8]
    194              MSC_Handle->error = MSC_OK;
   \   0000009C   0x7278             STRB     R0,[R7, #+9]
    195              MSC_Handle->req_state = MSC_REQ_IDLE;
   \   0000009E   0x72B8             STRB     R0,[R7, #+10]
    196              MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
   \   000000A0   0x78B9             LDRB     R1,[R7, #+2]
   \   000000A2   0x4620             MOV      R0,R4
   \   000000A4   0x.... 0x....      BL       USBH_AllocPipe
   \   000000A8   0x7078             STRB     R0,[R7, #+1]
    197              MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
   \   000000AA   0x78F9             LDRB     R1,[R7, #+3]
   \   000000AC   0x4620             MOV      R0,R4
   \   000000AE   0x.... 0x....      BL       USBH_AllocPipe
   \   000000B2   0x7130             STRB     R0,[R6, #+4]
    198          
    199              USBH_MSC_BOT_Init(phost);
   \   000000B4   0x4620             MOV      R0,R4
   \   000000B6   0x.... 0x....      BL       USBH_MSC_BOT_Init
    200              
    201              /* De-Initialize LUNs information */
    202              USBH_memset(MSC_Handle->unit, 0, sizeof(MSC_Handle->unit));
   \   000000BA   0x2268             MOVS     R2,#+104
   \   000000BC   0x2100             MOVS     R1,#+0
   \   000000BE   0xF106 0x0090      ADD      R0,R6,#+144
   \   000000C2   0x.... 0x....      BL       memset
    203              
    204              /* Open the new channels */
    205              USBH_OpenPipe  (phost,
    206                              MSC_Handle->OutPipe,
    207                              MSC_Handle->OutEp,
    208                              phost->device.address,
    209                              phost->device.speed,
    210                              USB_EP_TYPE_BULK,
    211                              MSC_Handle->OutEpSize);  
   \   000000C6   0x88B8             LDRH     R0,[R7, #+4]
   \   000000C8   0x9002             STR      R0,[SP, #+8]
   \   000000CA   0x2002             MOVS     R0,#+2
   \   000000CC   0x9001             STR      R0,[SP, #+4]
   \   000000CE   0x7868             LDRB     R0,[R5, #+1]
   \   000000D0   0x9000             STR      R0,[SP, #+0]
   \   000000D2   0xF894 0x331C      LDRB     R3,[R4, #+796]
   \   000000D6   0x78BA             LDRB     R2,[R7, #+2]
   \   000000D8   0x7879             LDRB     R1,[R7, #+1]
   \   000000DA   0x4620             MOV      R0,R4
   \   000000DC   0x.... 0x....      BL       USBH_OpenPipe
    212              
    213              USBH_OpenPipe  (phost,
    214                              MSC_Handle->InPipe,
    215                              MSC_Handle->InEp,
    216                              phost->device.address,
    217                              phost->device.speed,
    218                              USB_EP_TYPE_BULK,
    219                              MSC_Handle->InEpSize);     
   \   000000E0   0x88F8             LDRH     R0,[R7, #+6]
   \   000000E2   0x9002             STR      R0,[SP, #+8]
   \   000000E4   0x2002             MOVS     R0,#+2
   \   000000E6   0x9001             STR      R0,[SP, #+4]
   \   000000E8   0x7868             LDRB     R0,[R5, #+1]
   \   000000EA   0x9000             STR      R0,[SP, #+0]
   \   000000EC   0xF894 0x331C      LDRB     R3,[R4, #+796]
   \   000000F0   0x78FA             LDRB     R2,[R7, #+3]
   \   000000F2   0x7931             LDRB     R1,[R6, #+4]
   \   000000F4   0x4620             MOV      R0,R4
   \   000000F6   0x.... 0x....      BL       USBH_OpenPipe
    220              
    221              
    222              USBH_LL_SetToggle  (phost, MSC_Handle->InPipe,0);
   \   000000FA   0x2200             MOVS     R2,#+0
   \   000000FC   0x7931             LDRB     R1,[R6, #+4]
   \   000000FE   0x4620             MOV      R0,R4
   \   00000100   0x.... 0x....      BL       USBH_LL_SetToggle
    223              USBH_LL_SetToggle  (phost, MSC_Handle->OutPipe,0);
   \   00000104   0x2200             MOVS     R2,#+0
   \   00000106   0x7879             LDRB     R1,[R7, #+1]
   \   00000108   0x4620             MOV      R0,R4
   \   0000010A   0x.... 0x....      BL       USBH_LL_SetToggle
    224              status = USBH_OK; 
   \   0000010E   0x2600             MOVS     R6,#+0
    225            }
    226            return status;
   \                     ??USBH_MSC_InterfaceInit_0: (+1)
   \   00000110   0x4630             MOV      R0,R6
   \   00000112   0xBDFE             POP      {R1-R7,PC}       ;; return
    227          }
    228          
    229          /**
    230            * @brief  USBH_MSC_InterfaceDeInit 
    231            *         The function DeInit the Pipes used for the MSC class.
    232            * @param  phost: Host handle
    233            * @retval USBH Status
    234            */

   \                                 In section .text, align 2, keep-with-next
    235          USBH_StatusTypeDef USBH_MSC_InterfaceDeInit (USBH_HandleTypeDef *phost)
    236          {
   \                     USBH_MSC_InterfaceDeInit: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    237            MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
   \   00000004   0xF8D4 0x0374      LDR      R0,[R4, #+884]
   \   00000008   0x69C5             LDR      R5,[R0, #+28]
    238          
    239            if ( MSC_Handle->OutPipe)
   \   0000000A   0x7969             LDRB     R1,[R5, #+5]
   \   0000000C   0x2900             CMP      R1,#+0
   \   0000000E   0xD008             BEQ.N    ??USBH_MSC_InterfaceDeInit_0
    240            {
    241              USBH_ClosePipe(phost, MSC_Handle->OutPipe);
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       USBH_ClosePipe
    242              USBH_FreePipe  (phost, MSC_Handle->OutPipe);
   \   00000016   0x7969             LDRB     R1,[R5, #+5]
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x.... 0x....      BL       USBH_FreePipe
    243              MSC_Handle->OutPipe = 0;     /* Reset the Channel as Free */
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x7168             STRB     R0,[R5, #+5]
    244            }
    245            
    246            if ( MSC_Handle->InPipe)
   \                     ??USBH_MSC_InterfaceDeInit_0: (+1)
   \   00000022   0x7929             LDRB     R1,[R5, #+4]
   \   00000024   0x2900             CMP      R1,#+0
   \   00000026   0xD008             BEQ.N    ??USBH_MSC_InterfaceDeInit_1
    247            {
    248              USBH_ClosePipe(phost, MSC_Handle->InPipe);
   \   00000028   0x4620             MOV      R0,R4
   \   0000002A   0x.... 0x....      BL       USBH_ClosePipe
    249              USBH_FreePipe  (phost, MSC_Handle->InPipe);
   \   0000002E   0x7929             LDRB     R1,[R5, #+4]
   \   00000030   0x4620             MOV      R0,R4
   \   00000032   0x.... 0x....      BL       USBH_FreePipe
    250              MSC_Handle->InPipe = 0;     /* Reset the Channel as Free */
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x7128             STRB     R0,[R5, #+4]
   \                     ??USBH_MSC_InterfaceDeInit_1: (+1)
   \   0000003A   0xF8D4 0x0374      LDR      R0,[R4, #+884]
   \   0000003E   0x69C0             LDR      R0,[R0, #+28]
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD005             BEQ.N    ??USBH_MSC_InterfaceDeInit_2
    251            } 
    252          
    253            if(phost->pActiveClass->pData)
    254            {
    255              USBH_free (phost->pActiveClass->pData);
   \   00000044   0x.... 0x....      BL       free
    256              phost->pActiveClass->pData = 0;
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xF8D4 0x1374      LDR      R1,[R4, #+884]
   \   0000004E   0x61C8             STR      R0,[R1, #+28]
    257            }
    258            
    259            return USBH_OK;
   \                     ??USBH_MSC_InterfaceDeInit_2: (+1)
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    260          }
    261          
    262          /**
    263            * @brief  USBH_MSC_ClassRequest 
    264            *         The function is responsible for handling Standard requests
    265            *         for MSC class.
    266            * @param  phost: Host handle
    267            * @retval USBH Status
    268            */

   \                                 In section .text, align 2, keep-with-next
    269          static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
    270          {   
   \                     USBH_MSC_ClassRequest: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    271            MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
   \   00000002   0xF8D0 0x1374      LDR      R1,[R0, #+884]
   \   00000006   0x69CC             LDR      R4,[R1, #+28]
    272            USBH_StatusTypeDef status = USBH_BUSY;
   \   00000008   0x2501             MOVS     R5,#+1
    273            uint8_t i;
    274            
    275            /* Switch MSC REQ state machine */
    276            switch (MSC_Handle->req_state)
   \   0000000A   0xF994 0x100E      LDRSB    R1,[R4, #+14]
   \   0000000E   0x2900             CMP      R1,#+0
   \   00000010   0xD004             BEQ.N    ??USBH_MSC_ClassRequest_0
   \   00000012   0x2902             CMP      R1,#+2
   \   00000014   0xD002             BEQ.N    ??USBH_MSC_ClassRequest_0
   \   00000016   0x2903             CMP      R1,#+3
   \   00000018   0xD01E             BEQ.N    ??USBH_MSC_ClassRequest_1
   \   0000001A   0xE024             B.N      ??USBH_MSC_ClassRequest_2
    277            {
    278            case MSC_REQ_IDLE:
    279            case MSC_REQ_GET_MAX_LUN:   
    280              /* Issue GetMaxLUN request */
    281              status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
   \                     ??USBH_MSC_ClassRequest_0: (+1)
   \   0000001C   0x4621             MOV      R1,R4
   \   0000001E   0x.... 0x....      BL       USBH_MSC_BOT_REQ_GetMaxLUN
   \   00000022   0x4605             MOV      R5,R0
    282              
    283              /* When devices do not support the GetMaxLun request, this should
    284                 be considred as only one logical unit is supported */
    285              if(status == USBH_NOT_SUPPORTED)
   \   00000024   0x2D03             CMP      R5,#+3
   \   00000026   0xD102             BNE.N    ??USBH_MSC_ClassRequest_3
    286              {
    287                MSC_Handle->max_lun = 0;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x6020             STR      R0,[R4, #+0]
    288                status = USBH_OK;
   \   0000002C   0x4605             MOV      R5,R0
    289              }
    290              
    291              if(status == USBH_OK)
   \                     ??USBH_MSC_ClassRequest_3: (+1)
   \   0000002E   0x2D00             CMP      R5,#+0
   \   00000030   0xD119             BNE.N    ??USBH_MSC_ClassRequest_2
    292              {
    293                MSC_Handle->max_lun = (uint8_t )(MSC_Handle->max_lun) + 1;
   \   00000032   0x7820             LDRB     R0,[R4, #+0]
   \   00000034   0x1C40             ADDS     R0,R0,#+1
   \   00000036   0x6020             STR      R0,[R4, #+0]
    294                USBH_UsrLog ("Number of supported LUN: %lu", (int32_t)(MSC_Handle->max_lun));
    295                
    296                for(i = 0; i < MSC_Handle->max_lun; i++)
   \   00000038   0x2000             MOVS     R0,#+0
   \                     ??USBH_MSC_ClassRequest_4: (+1)
   \   0000003A   0x6821             LDR      R1,[R4, #+0]
   \   0000003C   0x4288             CMP      R0,R1
   \   0000003E   0xD212             BCS.N    ??USBH_MSC_ClassRequest_2
    297                {
    298                  MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
   \   00000040   0x2134             MOVS     R1,#+52
   \   00000042   0xFB11 0x4100      SMLABB   R1,R1,R0,R4
   \   00000046   0x2202             MOVS     R2,#+2
   \   00000048   0xF881 0x2092      STRB     R2,[R1, #+146]
    299                  MSC_Handle->unit[i].state_changed = 0;
   \   0000004C   0x2200             MOVS     R2,#+0
   \   0000004E   0xF881 0x20C1      STRB     R2,[R1, #+193]
    300                }
   \   00000052   0x1C40             ADDS     R0,R0,#+1
   \   00000054   0xB2C0             UXTB     R0,R0
   \   00000056   0xE7F0             B.N      ??USBH_MSC_ClassRequest_4
    301              }
    302              break;
    303              
    304            case MSC_REQ_ERROR :
    305              /* a Clear Feature should be issued here */
    306              if(USBH_ClrFeature(phost, 0x00) == USBH_OK)
   \                     ??USBH_MSC_ClassRequest_1: (+1)
   \   00000058   0x2100             MOVS     R1,#+0
   \   0000005A   0x.... 0x....      BL       USBH_ClrFeature
   \   0000005E   0x2800             CMP      R0,#+0
   \   00000060   0xD101             BNE.N    ??USBH_MSC_ClassRequest_2
    307              {
    308                MSC_Handle->req_state = MSC_Handle->prev_req_state; 
   \   00000062   0x7BE0             LDRB     R0,[R4, #+15]
   \   00000064   0x73A0             STRB     R0,[R4, #+14]
    309              }    
    310              break;
    311              
    312            default:
    313              break;
    314            }
    315            
    316            return status; 
   \                     ??USBH_MSC_ClassRequest_2: (+1)
   \   00000066   0x4628             MOV      R0,R5
   \   00000068   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    317          }
    318          
    319          /**
    320            * @brief  USBH_MSC_Process 
    321            *         The function is for managing state machine for MSC data transfers 
    322            * @param  phost: Host handle
    323            * @retval USBH Status
    324            */

   \                                 In section .text, align 4, keep-with-next
    325          static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
    326          {
   \                     USBH_MSC_Process: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
    327            MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
   \   00000004   0xF8D4 0x0374      LDR      R0,[R4, #+884]
   \   00000008   0x69C5             LDR      R5,[R0, #+28]
    328            USBH_StatusTypeDef error = USBH_BUSY ;
   \   0000000A   0x2601             MOVS     R6,#+1
    329            USBH_StatusTypeDef scsi_status = USBH_BUSY ;  
    330            USBH_StatusTypeDef ready_status = USBH_BUSY ;
    331            
    332            switch (MSC_Handle->state)
   \   0000000C   0xF995 0x000C      LDRSB    R0,[R5, #+12]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD003             BEQ.N    ??USBH_MSC_Process_1
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xF000 0x8103      BEQ.W    ??USBH_MSC_Process_2
   \   0000001A   0xE102             B.N      ??USBH_MSC_Process_3
    333            {
    334            case MSC_INIT:
    335              
    336              if(MSC_Handle->current_lun < MSC_Handle->max_lun)
   \                     ??USBH_MSC_Process_1: (+1)
   \   0000001C   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000020   0x6829             LDR      R1,[R5, #+0]
   \   00000022   0x4288             CMP      R0,R1
   \   00000024   0xF080 0x80F0      BCS.W    ??USBH_MSC_Process_4
    337              {
    338          
    339                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
   \   00000028   0x2734             MOVS     R7,#+52
   \   0000002A   0xFB07 0x5000      MLA      R0,R7,R0,R5
   \   0000002E   0x4631             MOV      R1,R6
   \   00000030   0xF880 0x1091      STRB     R1,[R0, #+145]
    340                /* Switch MSC REQ state machine */
    341                switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
   \   00000034   0xF8B5 0x10F8      LDRH     R1,[R5, #+248]
   \   00000038   0xFB07 0x5001      MLA      R0,R7,R1,R5
   \   0000003C   0xF990 0x2090      LDRSB    R2,[R0, #+144]
   \   00000040   0x2A08             CMP      R2,#+8
   \   00000042   0xF200 0x80EE      BHI.W    ??USBH_MSC_Process_3
   \   00000046   0xE8DF 0xF002      TBB      [PC, R2]
   \                     ??USBH_MSC_Process_0:
   \   0000004A   0x05 0xEC          DC8      0x5,0xEC,0x2B,0x7B
   \              0x2B 0x7B    
   \   0000004E   0x0D 0x97          DC8      0xD,0x97,0xEC,0xEC
   \              0xEC 0xEC    
   \   00000052   0xDB 0x00          DC8      0xDB,0x0
    342                {
    343                case MSC_INIT:
    344                  USBH_UsrLog ("LUN #%d: ", MSC_Handle->current_lun);
    345                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
   \                     ??USBH_MSC_Process_5: (+1)
   \   00000054   0x2104             MOVS     R1,#+4
   \   00000056   0xF880 0x1090      STRB     R1,[R0, #+144]
    346                  MSC_Handle->timer = phost->Timer;
   \   0000005A   0xF504 0x705D      ADD      R0,R4,#+884
   \   0000005E   0x6C40             LDR      R0,[R0, #+68]
   \   00000060   0xF8C5 0x00FC      STR      R0,[R5, #+252]
    347                  
    348                case MSC_READ_INQUIRY:
    349                  scsi_status = USBH_MSC_SCSI_Inquiry(phost, MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
   \                     ??USBH_MSC_Process_6: (+1)
   \   00000064   0xF8B5 0x10F8      LDRH     R1,[R5, #+248]
   \   00000068   0xFB07 0x5001      MLA      R0,R7,R1,R5
   \   0000006C   0xF100 0x029F      ADD      R2,R0,#+159
   \   00000070   0xB2C9             UXTB     R1,R1
   \   00000072   0x4620             MOV      R0,R4
   \   00000074   0x.... 0x....      BL       USBH_MSC_SCSI_Inquiry
    350                  
    351                  if( scsi_status == USBH_OK)
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD106             BNE.N    ??USBH_MSC_Process_7
    352                  {
    353                    USBH_UsrLog ("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
    354                    USBH_UsrLog ("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
    355                    USBH_UsrLog ("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
    356                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;        
   \   0000007C   0xF8B5 0x10F8      LDRH     R1,[R5, #+248]
   \   00000080   0xFB07 0x5101      MLA      R1,R7,R1,R5
   \   00000084   0x2202             MOVS     R2,#+2
   \   00000086   0xF881 0x2090      STRB     R2,[R1, #+144]
    357                  }
    358                  if( scsi_status == USBH_FAIL)
    359                  {
    360                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;         
    361                  }
    362                  else if(scsi_status == USBH_UNRECOVERED_ERROR)
    363                  {
    364                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
    365                    MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
    366                  }
    367                  break;    
    368                  
    369                case MSC_TEST_UNIT_READY:
    370                  ready_status = USBH_MSC_SCSI_TestUnitReady(phost, MSC_Handle->current_lun);
    371                  
    372                  if( ready_status == USBH_OK)
    373                  {
    374                    if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
    375                    {
    376                      MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1;
    377                      USBH_UsrLog ("MSC Device ready");
    378                    }
    379                    else
    380                    {
    381                      MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
    382                    }
    383                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
    384                    MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
    385                    MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
    386                  }
    387                  if( ready_status == USBH_FAIL)
    388                  {
    389                    /* Media not ready, so try to check again during 10s */
    390                    if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
    391                    {
    392                      MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1;
    393                      USBH_UsrLog ("MSC Device NOT ready");
    394                    }
    395                    else
    396                    {
    397                      MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
    398                    }         
    399                      MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE; 
    400                      MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
    401                      MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
    402                  }
    403                  else if(ready_status == USBH_UNRECOVERED_ERROR)
    404                  {
    405                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
    406                    MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
    407                  }
    408                  break;
    409                  
    410                case MSC_READ_CAPACITY10:   
    411                  scsi_status = USBH_MSC_SCSI_ReadCapacity(phost,MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
    412                  
    413                  if(scsi_status == USBH_OK)
    414                  {
    415                    if(MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1)
    416                    {
    417                      USBH_UsrLog ("MSC Device capacity : %lu Bytes", \
    418                        (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr * MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
    419                      USBH_UsrLog ("Block number : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
    420                      USBH_UsrLog ("Block Size   : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
    421                    }
    422                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
    423                    MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
    424                    MSC_Handle->current_lun++;
    425                  }
    426                  else if( scsi_status == USBH_FAIL)
   \                     ??USBH_MSC_Process_7: (+1)
   \   0000008A   0x2802             CMP      R0,#+2
   \   0000008C   0xF040 0x80A7      BNE.W    ??USBH_MSC_Process_8
    427                  {
    428                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
   \   00000090   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000094   0xFB07 0x5000      MLA      R0,R7,R0,R5
   \   00000098   0x2105             MOVS     R1,#+5
   \   0000009A   0xF880 0x1090      STRB     R1,[R0, #+144]
   \   0000009E   0xE0C0             B.N      ??USBH_MSC_Process_3
    429                  }
   \                     ??USBH_MSC_Process_9: (+1)
   \   000000A0   0xB2C9             UXTB     R1,R1
   \   000000A2   0x4620             MOV      R0,R4
   \   000000A4   0x.... 0x....      BL       USBH_MSC_SCSI_TestUnitReady
   \   000000A8   0x2800             CMP      R0,#+0
   \   000000AA   0xD11F             BNE.N    ??USBH_MSC_Process_10
   \   000000AC   0xF8B5 0x10F8      LDRH     R1,[R5, #+248]
   \   000000B0   0xFB07 0x5101      MLA      R1,R7,R1,R5
   \   000000B4   0xF991 0x2092      LDRSB    R2,[R1, #+146]
   \   000000B8   0x1E53             SUBS     R3,R2,#+1
   \   000000BA   0x419B             SBCS     R3,R3,R3
   \   000000BC   0x43DB             MVNS     R3,R3
   \   000000BE   0x0FDB             LSRS     R3,R3,#+31
   \   000000C0   0xF881 0x30C1      STRB     R3,[R1, #+193]
   \   000000C4   0xF8B5 0x10F8      LDRH     R1,[R5, #+248]
   \   000000C8   0xFB07 0x5101      MLA      R1,R7,R1,R5
   \   000000CC   0x2203             MOVS     R2,#+3
   \   000000CE   0xF881 0x2090      STRB     R2,[R1, #+144]
   \   000000D2   0xF8B5 0x10F8      LDRH     R1,[R5, #+248]
   \   000000D6   0xFB07 0x5101      MLA      R1,R7,R1,R5
   \   000000DA   0x2200             MOVS     R2,#+0
   \   000000DC   0xF881 0x2091      STRB     R2,[R1, #+145]
   \   000000E0   0xF8B5 0x10F8      LDRH     R1,[R5, #+248]
   \   000000E4   0xFB07 0x5101      MLA      R1,R7,R1,R5
   \   000000E8   0xF881 0x2092      STRB     R2,[R1, #+146]
   \                     ??USBH_MSC_Process_10: (+1)
   \   000000EC   0x2802             CMP      R0,#+2
   \   000000EE   0xD124             BNE.N    ??USBH_MSC_Process_11
   \   000000F0   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000000F4   0xFB07 0x5000      MLA      R0,R7,R0,R5
   \   000000F8   0xF990 0x1092      LDRSB    R1,[R0, #+146]
   \   000000FC   0x2902             CMP      R1,#+2
   \   000000FE   0xD003             BEQ.N    ??USBH_MSC_Process_12
   \   00000100   0x4631             MOV      R1,R6
   \   00000102   0xF880 0x10C1      STRB     R1,[R0, #+193]
   \   00000106   0xE002             B.N      ??USBH_MSC_Process_13
   \                     ??USBH_MSC_Process_12: (+1)
   \   00000108   0x2100             MOVS     R1,#+0
   \   0000010A   0xF880 0x10C1      STRB     R1,[R0, #+193]
   \                     ??USBH_MSC_Process_13: (+1)
   \   0000010E   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000112   0xFB07 0x5000      MLA      R0,R7,R0,R5
   \   00000116   0x2105             MOVS     R1,#+5
   \   00000118   0xF880 0x1090      STRB     R1,[R0, #+144]
   \   0000011C   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000120   0xFB07 0x5000      MLA      R0,R7,R0,R5
   \   00000124   0x4631             MOV      R1,R6
   \   00000126   0xF880 0x1091      STRB     R1,[R0, #+145]
   \   0000012A   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   0000012E   0xFB07 0x5000      MLA      R0,R7,R0,R5
   \   00000132   0x2102             MOVS     R1,#+2
   \   00000134   0xF880 0x1092      STRB     R1,[R0, #+146]
   \   00000138   0xE073             B.N      ??USBH_MSC_Process_3
   \                     ??USBH_MSC_Process_11: (+1)
   \   0000013A   0x2804             CMP      R0,#+4
   \   0000013C   0xD171             BNE.N    ??USBH_MSC_Process_3
   \   0000013E   0xE050             B.N      ??USBH_MSC_Process_14
   \                     ??USBH_MSC_Process_15: (+1)
   \   00000140   0xF100 0x0294      ADD      R2,R0,#+148
   \   00000144   0xB2C9             UXTB     R1,R1
   \   00000146   0x4620             MOV      R0,R4
   \   00000148   0x.... 0x....      BL       USBH_MSC_SCSI_ReadCapacity
   \   0000014C   0x2800             CMP      R0,#+0
   \   0000014E   0xD19C             BNE.N    ??USBH_MSC_Process_7
   \   00000150   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000154   0xFB07 0x5000      MLA      R0,R7,R0,R5
   \   00000158   0x4631             MOV      R1,R6
   \   0000015A   0xF880 0x1090      STRB     R1,[R0, #+144]
   \   0000015E   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000162   0xFB07 0x5000      MLA      R0,R7,R0,R5
   \   00000166   0x2100             MOVS     R1,#+0
   \   00000168   0xF880 0x1091      STRB     R1,[R0, #+145]
   \   0000016C   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   00000170   0x1C40             ADDS     R0,R0,#+1
   \   00000172   0xF8A5 0x00F8      STRH     R0,[R5, #+248]
   \   00000176   0xE054             B.N      ??USBH_MSC_Process_3
    430                  else if(scsi_status == USBH_UNRECOVERED_ERROR)
    431                  {
    432                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
    433                    MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
    434                  }
    435                  break;
    436                  
    437                case MSC_REQUEST_SENSE:
    438                  scsi_status = USBH_MSC_SCSI_RequestSense(phost,  MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
   \                     ??USBH_MSC_Process_16: (+1)
   \   00000178   0xF100 0x029C      ADD      R2,R0,#+156
   \   0000017C   0xB2C9             UXTB     R1,R1
   \   0000017E   0x4620             MOV      R0,R4
   \   00000180   0x.... 0x....      BL       USBH_MSC_SCSI_RequestSense
    439                  
    440                  if( scsi_status == USBH_OK)
   \   00000184   0x2800             CMP      R0,#+0
   \   00000186   0xD120             BNE.N    ??USBH_MSC_Process_17
    441                  {
    442                    if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
    443                       (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY) )   
   \   00000188   0xF8B5 0x10F8      LDRH     R1,[R5, #+248]
   \   0000018C   0xFB07 0x5101      MLA      R1,R7,R1,R5
   \   00000190   0xF101 0x0290      ADD      R2,R1,#+144
   \   00000194   0x7B12             LDRB     R2,[R2, #+12]
   \   00000196   0x2A06             CMP      R2,#+6
   \   00000198   0xD001             BEQ.N    ??USBH_MSC_Process_18
   \   0000019A   0x2A02             CMP      R2,#+2
   \   0000019C   0xD10D             BNE.N    ??USBH_MSC_Process_19
    444                    {
    445                      
    446                      if((phost->Timer - MSC_Handle->timer) < 10000)
   \                     ??USBH_MSC_Process_18: (+1)
   \   0000019E   0xF504 0x725D      ADD      R2,R4,#+884
   \   000001A2   0x6C52             LDR      R2,[R2, #+68]
   \   000001A4   0xF8D5 0x30FC      LDR      R3,[R5, #+252]
   \   000001A8   0x1AD2             SUBS     R2,R2,R3
   \   000001AA   0xF242 0x7310      MOVW     R3,#+10000
   \   000001AE   0x429A             CMP      R2,R3
   \   000001B0   0xD203             BCS.N    ??USBH_MSC_Process_19
    447                      {
    448                        MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
   \   000001B2   0x2002             MOVS     R0,#+2
   \   000001B4   0xF881 0x0090      STRB     R0,[R1, #+144]
    449                        break;
   \   000001B8   0xE033             B.N      ??USBH_MSC_Process_3
    450                      }        
    451                    }
    452                    
    453                    USBH_UsrLog ("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
    454                    USBH_UsrLog ("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
    455                    USBH_UsrLog ("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
    456                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
   \                     ??USBH_MSC_Process_19: (+1)
   \   000001BA   0x4632             MOV      R2,R6
   \   000001BC   0xF881 0x2090      STRB     R2,[R1, #+144]
    457                    MSC_Handle->current_lun++;
   \   000001C0   0xF8B5 0x10F8      LDRH     R1,[R5, #+248]
   \   000001C4   0x1C49             ADDS     R1,R1,#+1
   \   000001C6   0xF8A5 0x10F8      STRH     R1,[R5, #+248]
    458                  }
    459                  if( scsi_status == USBH_FAIL)
   \                     ??USBH_MSC_Process_17: (+1)
   \   000001CA   0x2802             CMP      R0,#+2
   \   000001CC   0xD107             BNE.N    ??USBH_MSC_Process_8
    460                  {
    461                    USBH_UsrLog ("MSC Device NOT ready");
    462                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR; 
   \   000001CE   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000001D2   0xFB07 0x5000      MLA      R0,R7,R0,R5
   \   000001D6   0x2108             MOVS     R1,#+8
   \   000001D8   0xF880 0x1090      STRB     R1,[R0, #+144]
   \   000001DC   0xE021             B.N      ??USBH_MSC_Process_3
    463                  }
    464                  else if(scsi_status == USBH_UNRECOVERED_ERROR)
   \                     ??USBH_MSC_Process_8: (+1)
   \   000001DE   0x2804             CMP      R0,#+4
   \   000001E0   0xD11F             BNE.N    ??USBH_MSC_Process_3
    465                  {
    466                    MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
   \                     ??USBH_MSC_Process_14: (+1)
   \   000001E2   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000001E6   0xFB07 0x5000      MLA      R0,R7,R0,R5
   \   000001EA   0x4631             MOV      R1,R6
   \   000001EC   0xF880 0x1090      STRB     R1,[R0, #+144]
    467                    MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;   
   \   000001F0   0xF8B5 0x00F8      LDRH     R0,[R5, #+248]
   \   000001F4   0xFB07 0x5000      MLA      R0,R7,R0,R5
   \   000001F8   0x2102             MOVS     R1,#+2
   \   000001FA   0xF880 0x1091      STRB     R1,[R0, #+145]
   \   000001FE   0xE010             B.N      ??USBH_MSC_Process_3
    468                  }
    469                  break;  
    470              
    471                case MSC_UNRECOVERED_ERROR: 
    472                  MSC_Handle->current_lun++;
   \                     ??USBH_MSC_Process_20: (+1)
   \   00000200   0x1C48             ADDS     R0,R1,#+1
   \   00000202   0xF8A5 0x00F8      STRH     R0,[R5, #+248]
    473                  break;  
   \   00000206   0xE00C             B.N      ??USBH_MSC_Process_3
    474                  
    475                default:
    476                  break;
    477                }
    478                
    479          #if (USBH_USE_OS == 1)
    480              osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
    481          #endif       
    482              }
    483              else
    484              {
    485                MSC_Handle->current_lun = 0;
   \                     ??USBH_MSC_Process_4: (+1)
   \   00000208   0x2000             MOVS     R0,#+0
   \   0000020A   0xF8A5 0x00F8      STRH     R0,[R5, #+248]
    486              MSC_Handle->state = MSC_IDLE;
   \   0000020E   0x4630             MOV      R0,R6
   \   00000210   0x7328             STRB     R0,[R5, #+12]
    487          #if (USBH_USE_OS == 1)
    488              osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
    489          #endif 
    490              phost->pUser(phost, HOST_USER_CLASS_ACTIVE);     
   \   00000212   0x2102             MOVS     R1,#+2
   \   00000214   0x4620             MOV      R0,R4
   \   00000216   0xF504 0x725D      ADD      R2,R4,#+884
   \   0000021A   0x6D12             LDR      R2,[R2, #+80]
   \   0000021C   0x4790             BLX      R2
   \   0000021E   0xE000             B.N      ??USBH_MSC_Process_3
    491              }
    492              break;
    493          
    494            case MSC_IDLE:
    495              error = USBH_OK;  
   \                     ??USBH_MSC_Process_2: (+1)
   \   00000220   0x2600             MOVS     R6,#+0
    496              break;
    497              
    498            default:
    499              break; 
    500            }
    501            return error;
   \                     ??USBH_MSC_Process_3: (+1)
   \   00000222   0x4630             MOV      R0,R6
   \   00000224   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    502          }
    503          
    504          
    505          /**
    506            * @brief  USBH_MSC_SOFProcess 
    507            *         The function is for SOF state
    508            * @param  phost: Host handle
    509            * @retval USBH Status
    510            */

   \                                 In section .text, align 2, keep-with-next
    511          static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
    512          {
    513          
    514            return USBH_OK;
   \                     USBH_MSC_SOFProcess: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    515          }
    516          /**
    517            * @brief  USBH_MSC_RdWrProcess 
    518            *         The function is for managing state machine for MSC I/O Process
    519            * @param  phost: Host handle
    520            * @param  lun: logical Unit Number
    521            * @retval USBH Status
    522            */

   \                                 In section .text, align 2, keep-with-next
    523          static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
    524          {
   \                     USBH_MSC_RdWrProcess: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    525            MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
   \   00000002   0xF8D0 0x2374      LDR      R2,[R0, #+884]
   \   00000006   0x69D2             LDR      R2,[R2, #+28]
    526            USBH_StatusTypeDef error = USBH_BUSY ;
   \   00000008   0x2401             MOVS     R4,#+1
    527            USBH_StatusTypeDef scsi_status = USBH_BUSY ;  
    528            
    529            /* Switch MSC REQ state machine */
    530            switch (MSC_Handle->unit[lun].state)
   \   0000000A   0x2334             MOVS     R3,#+52
   \   0000000C   0xFB13 0x2501      SMLABB   R5,R3,R1,R2
   \   00000010   0xF995 0x2090      LDRSB    R2,[R5, #+144]
   \   00000014   0x2A05             CMP      R2,#+5
   \   00000016   0xD01C             BEQ.N    ??USBH_MSC_RdWrProcess_0
   \   00000018   0xD330             BCC.N    ??USBH_MSC_RdWrProcess_1
   \   0000001A   0x2A07             CMP      R2,#+7
   \   0000001C   0xD00D             BEQ.N    ??USBH_MSC_RdWrProcess_2
   \   0000001E   0xD22D             BCS.N    ??USBH_MSC_RdWrProcess_1
    531            {
    532           
    533            case MSC_READ: 
    534              scsi_status = USBH_MSC_SCSI_Read(phost,lun, 0, NULL, 0) ;
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0x9200             STR      R2,[SP, #+0]
   \   00000024   0x4613             MOV      R3,R2
   \   00000026   0x.... 0x....      BL       USBH_MSC_SCSI_Read
    535              
    536              if(scsi_status == USBH_OK)
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD00C             BEQ.N    ??USBH_MSC_RdWrProcess_3
    537              {
    538                MSC_Handle->unit[lun].state = MSC_IDLE;
    539                error = USBH_OK;     
    540              }
    541              else if( scsi_status == USBH_FAIL)
    542              {
    543                MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;  
    544              }
    545              else if(scsi_status == USBH_UNRECOVERED_ERROR)
    546              {
    547                MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
    548                    error = USBH_FAIL;
    549              }
    550          #if (USBH_USE_OS == 1)
    551              osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
    552          #endif   
    553              break;     
    554              
    555            case MSC_WRITE: 
    556              scsi_status = USBH_MSC_SCSI_Write(phost,lun, 0, NULL, 0) ;
    557              
    558              if(scsi_status == USBH_OK)
    559              {
    560                  MSC_Handle->unit[lun].state = MSC_IDLE;
    561                  error = USBH_OK;             
    562              }
    563              else if( scsi_status == USBH_FAIL)
   \                     ??USBH_MSC_RdWrProcess_4: (+1)
   \   0000002E   0x2802             CMP      R0,#+2
   \   00000030   0xD11E             BNE.N    ??USBH_MSC_RdWrProcess_5
    564              {
    565                MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;  
   \   00000032   0x2005             MOVS     R0,#+5
   \   00000034   0xF885 0x0090      STRB     R0,[R5, #+144]
   \   00000038   0xE020             B.N      ??USBH_MSC_RdWrProcess_1
    566              }
   \                     ??USBH_MSC_RdWrProcess_2: (+1)
   \   0000003A   0x2200             MOVS     R2,#+0
   \   0000003C   0x9200             STR      R2,[SP, #+0]
   \   0000003E   0x4613             MOV      R3,R2
   \   00000040   0x.... 0x....      BL       USBH_MSC_SCSI_Write
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD1F2             BNE.N    ??USBH_MSC_RdWrProcess_4
   \                     ??USBH_MSC_RdWrProcess_3: (+1)
   \   00000048   0x4620             MOV      R0,R4
   \   0000004A   0xF885 0x0090      STRB     R0,[R5, #+144]
   \   0000004E   0x2400             MOVS     R4,#+0
   \   00000050   0xE014             B.N      ??USBH_MSC_RdWrProcess_1
    567              else if(scsi_status == USBH_UNRECOVERED_ERROR)
    568              {
    569                MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
    570                    error = USBH_FAIL;
    571              }
    572          #if (USBH_USE_OS == 1)
    573              osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
    574          #endif       
    575              break; 
    576            
    577            case MSC_REQUEST_SENSE:
    578              scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
   \                     ??USBH_MSC_RdWrProcess_0: (+1)
   \   00000052   0xF105 0x029C      ADD      R2,R5,#+156
   \   00000056   0x.... 0x....      BL       USBH_MSC_SCSI_RequestSense
    579              
    580              if( scsi_status == USBH_OK)
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD106             BNE.N    ??USBH_MSC_RdWrProcess_6
    581              {
    582                USBH_UsrLog ("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
    583                USBH_UsrLog ("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
    584                USBH_UsrLog ("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
    585                MSC_Handle->unit[lun].state = MSC_IDLE;
   \   0000005E   0x4621             MOV      R1,R4
   \   00000060   0xF885 0x1090      STRB     R1,[R5, #+144]
    586                MSC_Handle->unit[lun].error = MSC_ERROR;
   \   00000064   0x2102             MOVS     R1,#+2
   \   00000066   0xF885 0x1091      STRB     R1,[R5, #+145]
    587                
    588                error = USBH_FAIL;
   \   0000006A   0x460C             MOV      R4,R1
    589              }
    590              if( scsi_status == USBH_FAIL)
   \                     ??USBH_MSC_RdWrProcess_6: (+1)
   \   0000006C   0x2802             CMP      R0,#+2
   \   0000006E   0xD005             BEQ.N    ??USBH_MSC_RdWrProcess_1
    591              {
    592                USBH_UsrLog ("MSC Device NOT ready");
    593              }
    594              else if(scsi_status == USBH_UNRECOVERED_ERROR)
   \                     ??USBH_MSC_RdWrProcess_5: (+1)
   \   00000070   0x2804             CMP      R0,#+4
   \   00000072   0xD103             BNE.N    ??USBH_MSC_RdWrProcess_1
    595              {
    596                MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;  
   \   00000074   0x2008             MOVS     R0,#+8
   \   00000076   0xF885 0x0090      STRB     R0,[R5, #+144]
    597                    error = USBH_FAIL;
   \   0000007A   0x2402             MOVS     R4,#+2
    598              }
    599          #if (USBH_USE_OS == 1)
    600              osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
    601          #endif       
    602              break;  
    603              
    604            default:
    605              break;  
    606              
    607            }
    608            return error;
   \                     ??USBH_MSC_RdWrProcess_1: (+1)
   \   0000007C   0x4620             MOV      R0,R4
   \   0000007E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    609          }
    610          
    611          /**
    612            * @brief  USBH_MSC_IsReady 
    613            *         The function check if the MSC function is ready
    614            * @param  phost: Host handle
    615            * @retval USBH Status
    616            */

   \                                 In section .text, align 2, keep-with-next
    617          uint8_t  USBH_MSC_IsReady (USBH_HandleTypeDef *phost)
    618          {
    619              MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
    620              
    621            if(phost->gState == HOST_CLASS)
   \                     USBH_MSC_IsReady: (+1)
   \   00000000   0xF990 0x1000      LDRSB    R1,[R0, #+0]
   \   00000004   0x290A             CMP      R1,#+10
   \   00000006   0xD10A             BNE.N    ??USBH_MSC_IsReady_0
    622            {
    623              return (MSC_Handle->state == MSC_IDLE);
   \   00000008   0xF8D0 0x0374      LDR      R0,[R0, #+884]
   \   0000000C   0x69C0             LDR      R0,[R0, #+28]
   \   0000000E   0xF990 0x000C      LDRSB    R0,[R0, #+12]
   \   00000012   0x2801             CMP      R0,#+1
   \   00000014   0xD101             BNE.N    ??USBH_MSC_IsReady_1
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x4770             BX       LR
   \                     ??USBH_MSC_IsReady_1: (+1)
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x4770             BX       LR
    624            }
    625            else
    626            {
    627              return 0;
   \                     ??USBH_MSC_IsReady_0: (+1)
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x4770             BX       LR               ;; return
    628            }
    629          }
    630          
    631          /**
    632            * @brief  USBH_MSC_GetMaxLUN 
    633            *         The function return the Max LUN supported
    634            * @param  phost: Host handle
    635            * @retval logical Unit Number supported
    636            */

   \                                 In section .text, align 2, keep-with-next
    637          int8_t  USBH_MSC_GetMaxLUN (USBH_HandleTypeDef *phost)
    638          {
    639            MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;    
   \                     USBH_MSC_GetMaxLUN: (+1)
   \   00000000   0xF8D0 0x1374      LDR      R1,[R0, #+884]
   \   00000004   0x69C9             LDR      R1,[R1, #+28]
    640            
    641            if ((phost->gState == HOST_CLASS) && (MSC_Handle->state == MSC_IDLE))
   \   00000006   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   0000000A   0x280A             CMP      R0,#+10
   \   0000000C   0xD106             BNE.N    ??USBH_MSC_GetMaxLUN_0
   \   0000000E   0xF991 0x000C      LDRSB    R0,[R1, #+12]
   \   00000012   0x2801             CMP      R0,#+1
   \   00000014   0xD102             BNE.N    ??USBH_MSC_GetMaxLUN_0
    642            {
    643              return  MSC_Handle->max_lun;
   \   00000016   0x6808             LDR      R0,[R1, #+0]
   \   00000018   0xB240             SXTB     R0,R0
   \   0000001A   0x4770             BX       LR
    644            }  
    645            return 0xFF;
   \                     ??USBH_MSC_GetMaxLUN_0: (+1)
   \   0000001C   0xF04F 0x30FF      MOV      R0,#-1
   \   00000020   0x4770             BX       LR               ;; return
    646          }
    647          
    648          /**
    649            * @brief  USBH_MSC_UnitIsReady 
    650            *         The function check whether a LUN is ready
    651            * @param  phost: Host handle
    652            * @param  lun: logical Unit Number
    653            * @retval Lun status (0: not ready / 1: ready)
    654            */

   \                                 In section .text, align 2, keep-with-next
    655          uint8_t  USBH_MSC_UnitIsReady (USBH_HandleTypeDef *phost, uint8_t lun)
    656          {
    657            MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
    658            
    659            if(phost->gState == HOST_CLASS)
   \                     USBH_MSC_UnitIsReady: (+1)
   \   00000000   0xF990 0x2000      LDRSB    R2,[R0, #+0]
   \   00000004   0x2A0A             CMP      R2,#+10
   \   00000006   0xD10B             BNE.N    ??USBH_MSC_UnitIsReady_0
    660            {
    661              return (MSC_Handle->unit[lun].error == MSC_OK);
   \   00000008   0x2234             MOVS     R2,#+52
   \   0000000A   0xF8D0 0x0374      LDR      R0,[R0, #+884]
   \   0000000E   0x69C0             LDR      R0,[R0, #+28]
   \   00000010   0xFB12 0x0001      SMLABB   R0,R2,R1,R0
   \   00000014   0xF990 0x1091      LDRSB    R1,[R0, #+145]
   \   00000018   0x1E48             SUBS     R0,R1,#+1
   \   0000001A   0x4180             SBCS     R0,R0,R0
   \   0000001C   0x0FC0             LSRS     R0,R0,#+31
   \   0000001E   0x4770             BX       LR
    662            }
    663            else
    664            {
    665              return 0;
   \                     ??USBH_MSC_UnitIsReady_0: (+1)
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x4770             BX       LR               ;; return
    666            }
    667          }
    668                
    669          /**
    670            * @brief  USBH_MSC_GetLUNInfo 
    671            *         The function return a LUN information
    672            * @param  phost: Host handle
    673            * @param  lun: logical Unit Number
    674            * @retval USBH Status
    675            */

   \                                 In section .text, align 2, keep-with-next
    676          USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
    677          {
   \                     USBH_MSC_GetLUNInfo: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4603             MOV      R3,R0
   \   00000004   0x4610             MOV      R0,R2
    678            MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;    
    679            if(phost->gState == HOST_CLASS)
   \   00000006   0xF993 0x2000      LDRSB    R2,[R3, #+0]
   \   0000000A   0x2A0A             CMP      R2,#+10
   \   0000000C   0xD10B             BNE.N    ??USBH_MSC_GetLUNInfo_0
    680            {
    681              USBH_memcpy(info,&MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
   \   0000000E   0x2234             MOVS     R2,#+52
   \   00000010   0x4614             MOV      R4,R2
   \   00000012   0xF8D3 0x3374      LDR      R3,[R3, #+884]
   \   00000016   0x69DB             LDR      R3,[R3, #+28]
   \   00000018   0xFB14 0x3101      SMLABB   R1,R4,R1,R3
   \   0000001C   0x3190             ADDS     R1,R1,#+144
   \   0000001E   0x.... 0x....      BL       memcpy
    682              return USBH_OK;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xBD10             POP      {R4,PC}
    683            }
    684            else
    685            {
    686              return USBH_FAIL;
   \                     ??USBH_MSC_GetLUNInfo_0: (+1)
   \   00000026   0x2002             MOVS     R0,#+2
   \   00000028   0xBD10             POP      {R4,PC}          ;; return
    687            }
    688          }
    689          
    690          /**
    691            * @brief  USBH_MSC_Read 
    692            *         The function performs a Read operation 
    693            * @param  phost: Host handle
    694            * @param  lun: logical Unit Number
    695            * @param  address: sector address
    696            * @param  pbuf: pointer to data
    697            * @param  length: number of sector to read
    698            * @retval USBH Status
    699            */

   \                                 In section .text, align 2, keep-with-next
    700          USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
    701                                               uint8_t lun,
    702                                               uint32_t address,
    703                                               uint8_t *pbuf,
    704                                               uint32_t length)
    705          {
   \                     USBH_MSC_Read: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x460D             MOV      R5,R1
    706            uint32_t timeout;
    707            MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
   \   0000000A   0xF8D4 0x0374      LDR      R0,[R4, #+884]
   \   0000000E   0x69C6             LDR      R6,[R0, #+28]
    708            
    709            if ((phost->device.is_connected == 0) || 
    710                (phost->gState != HOST_CLASS) || 
    711                (MSC_Handle->unit[lun].state != MSC_IDLE))
   \   00000010   0xF894 0x031E      LDRB     R0,[R4, #+798]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD00A             BEQ.N    ??USBH_MSC_Read_0
   \   00000018   0xF994 0x0000      LDRSB    R0,[R4, #+0]
   \   0000001C   0x280A             CMP      R0,#+10
   \   0000001E   0xD106             BNE.N    ??USBH_MSC_Read_0
   \   00000020   0x2034             MOVS     R0,#+52
   \   00000022   0xFB10 0x6005      SMLABB   R0,R0,R5,R6
   \   00000026   0xF990 0x1090      LDRSB    R1,[R0, #+144]
   \   0000002A   0x2901             CMP      R1,#+1
   \   0000002C   0xD001             BEQ.N    ??USBH_MSC_Read_1
    712            {
    713              return  USBH_FAIL;
   \                     ??USBH_MSC_Read_0: (+1)
   \   0000002E   0x2002             MOVS     R0,#+2
   \   00000030   0xE027             B.N      ??USBH_MSC_Read_2
    714            }
    715            MSC_Handle->state = MSC_READ;
   \                     ??USBH_MSC_Read_1: (+1)
   \   00000032   0x2106             MOVS     R1,#+6
   \   00000034   0x7331             STRB     R1,[R6, #+12]
    716            MSC_Handle->unit[lun].state = MSC_READ;
   \   00000036   0xF880 0x1090      STRB     R1,[R0, #+144]
    717            MSC_Handle->rw_lun = lun;
   \   0000003A   0xF8A6 0x50FA      STRH     R5,[R6, #+250]
   \   0000003E   0x9F08             LDR      R7,[SP, #+32]
    718            USBH_MSC_SCSI_Read(phost,
    719                               lun,
    720                               address,
    721                               pbuf,
    722                               length);
   \   00000040   0x9700             STR      R7,[SP, #+0]
   \   00000042   0x4629             MOV      R1,R5
   \   00000044   0x4620             MOV      R0,R4
   \   00000046   0x.... 0x....      BL       USBH_MSC_SCSI_Read
    723            
    724            timeout = phost->Timer;
   \   0000004A   0xF8D4 0x83B8      LDR      R8,[R4, #+952]
    725            
    726            while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
   \                     ??USBH_MSC_Read_3: (+1)
   \   0000004E   0x4629             MOV      R1,R5
   \   00000050   0x4620             MOV      R0,R4
   \   00000052   0x.... 0x....      BL       USBH_MSC_RdWrProcess
   \   00000056   0x2801             CMP      R0,#+1
   \   00000058   0xD110             BNE.N    ??USBH_MSC_Read_4
    727            {
    728              if(((phost->Timer - timeout) > (10000 * length)) || (phost->device.is_connected == 0))
   \   0000005A   0xF242 0x7010      MOVW     R0,#+10000
   \   0000005E   0x4378             MULS     R0,R0,R7
   \   00000060   0xF8D4 0x13B8      LDR      R1,[R4, #+952]
   \   00000064   0xEBA1 0x0108      SUB      R1,R1,R8
   \   00000068   0x4288             CMP      R0,R1
   \   0000006A   0xD303             BCC.N    ??USBH_MSC_Read_5
   \   0000006C   0xF894 0x031E      LDRB     R0,[R4, #+798]
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD1EC             BNE.N    ??USBH_MSC_Read_3
    729              {
    730                MSC_Handle->state = MSC_IDLE;
   \                     ??USBH_MSC_Read_5: (+1)
   \   00000074   0x2001             MOVS     R0,#+1
   \   00000076   0x7330             STRB     R0,[R6, #+12]
    731                return USBH_FAIL;
   \   00000078   0x2002             MOVS     R0,#+2
   \   0000007A   0xE002             B.N      ??USBH_MSC_Read_2
    732              }
    733            }
    734            MSC_Handle->state = MSC_IDLE;
   \                     ??USBH_MSC_Read_4: (+1)
   \   0000007C   0x2001             MOVS     R0,#+1
   \   0000007E   0x7330             STRB     R0,[R6, #+12]
    735            return USBH_OK;
   \   00000080   0x2000             MOVS     R0,#+0
   \                     ??USBH_MSC_Read_2: (+1)
   \   00000082   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
    736          }
    737          
    738          /**
    739            * @brief  USBH_MSC_Write 
    740            *         The function performs a Write operation 
    741            * @param  phost: Host handle
    742            * @param  lun: logical Unit Number
    743            * @param  address: sector address
    744            * @param  pbuf: pointer to data
    745            * @param  length: number of sector to write
    746            * @retval USBH Status
    747            */

   \                                 In section .text, align 2, keep-with-next
    748          USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
    749                                               uint8_t lun,
    750                                               uint32_t address,
    751                                               uint8_t *pbuf,
    752                                               uint32_t length)
    753          {
   \                     USBH_MSC_Write: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x460D             MOV      R5,R1
    754            uint32_t timeout;
    755            MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
   \   0000000A   0xF8D4 0x0374      LDR      R0,[R4, #+884]
   \   0000000E   0x69C6             LDR      R6,[R0, #+28]
    756            
    757            if ((phost->device.is_connected == 0) || 
    758                (phost->gState != HOST_CLASS) || 
    759                (MSC_Handle->unit[lun].state != MSC_IDLE))
   \   00000010   0xF894 0x031E      LDRB     R0,[R4, #+798]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD00A             BEQ.N    ??USBH_MSC_Write_0
   \   00000018   0xF994 0x0000      LDRSB    R0,[R4, #+0]
   \   0000001C   0x280A             CMP      R0,#+10
   \   0000001E   0xD106             BNE.N    ??USBH_MSC_Write_0
   \   00000020   0x2034             MOVS     R0,#+52
   \   00000022   0xFB10 0x6005      SMLABB   R0,R0,R5,R6
   \   00000026   0xF990 0x1090      LDRSB    R1,[R0, #+144]
   \   0000002A   0x2901             CMP      R1,#+1
   \   0000002C   0xD001             BEQ.N    ??USBH_MSC_Write_1
    760            {
    761              return  USBH_FAIL;
   \                     ??USBH_MSC_Write_0: (+1)
   \   0000002E   0x2002             MOVS     R0,#+2
   \   00000030   0xE027             B.N      ??USBH_MSC_Write_2
    762            }
    763            MSC_Handle->state = MSC_WRITE;
   \                     ??USBH_MSC_Write_1: (+1)
   \   00000032   0x2107             MOVS     R1,#+7
   \   00000034   0x7331             STRB     R1,[R6, #+12]
    764            MSC_Handle->unit[lun].state = MSC_WRITE;
   \   00000036   0xF880 0x1090      STRB     R1,[R0, #+144]
    765            MSC_Handle->rw_lun = lun;
   \   0000003A   0xF8A6 0x50FA      STRH     R5,[R6, #+250]
   \   0000003E   0x9F08             LDR      R7,[SP, #+32]
    766            USBH_MSC_SCSI_Write(phost,
    767                               lun,
    768                               address,
    769                               pbuf,
    770                               length);
   \   00000040   0x9700             STR      R7,[SP, #+0]
   \   00000042   0x4629             MOV      R1,R5
   \   00000044   0x4620             MOV      R0,R4
   \   00000046   0x.... 0x....      BL       USBH_MSC_SCSI_Write
    771            
    772            timeout = phost->Timer;
   \   0000004A   0xF8D4 0x83B8      LDR      R8,[R4, #+952]
    773            while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
   \                     ??USBH_MSC_Write_3: (+1)
   \   0000004E   0x4629             MOV      R1,R5
   \   00000050   0x4620             MOV      R0,R4
   \   00000052   0x.... 0x....      BL       USBH_MSC_RdWrProcess
   \   00000056   0x2801             CMP      R0,#+1
   \   00000058   0xD110             BNE.N    ??USBH_MSC_Write_4
    774            {
    775              if(((phost->Timer - timeout) >  (10000 * length)) || (phost->device.is_connected == 0))
   \   0000005A   0xF242 0x7010      MOVW     R0,#+10000
   \   0000005E   0x4378             MULS     R0,R0,R7
   \   00000060   0xF8D4 0x13B8      LDR      R1,[R4, #+952]
   \   00000064   0xEBA1 0x0108      SUB      R1,R1,R8
   \   00000068   0x4288             CMP      R0,R1
   \   0000006A   0xD303             BCC.N    ??USBH_MSC_Write_5
   \   0000006C   0xF894 0x031E      LDRB     R0,[R4, #+798]
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD1EC             BNE.N    ??USBH_MSC_Write_3
    776              {
    777                MSC_Handle->state = MSC_IDLE;
   \                     ??USBH_MSC_Write_5: (+1)
   \   00000074   0x2001             MOVS     R0,#+1
   \   00000076   0x7330             STRB     R0,[R6, #+12]
    778                return USBH_FAIL;
   \   00000078   0x2002             MOVS     R0,#+2
   \   0000007A   0xE002             B.N      ??USBH_MSC_Write_2
    779              }
    780            }
    781            MSC_Handle->state = MSC_IDLE;
   \                     ??USBH_MSC_Write_4: (+1)
   \   0000007C   0x2001             MOVS     R0,#+1
   \   0000007E   0x7330             STRB     R0,[R6, #+12]
    782            return USBH_OK;
   \   00000080   0x2000             MOVS     R0,#+0
   \                     ??USBH_MSC_Write_2: (+1)
   \   00000082   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
    783          }

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "MSC">`:
   \   00000000   0x4D 0x53          DC8 "MSC"
   \              0x43 0x00    
    784          
    785          /**
    786            * @}
    787            */ 
    788          
    789          /**
    790            * @}
    791            */ 
    792          
    793          /**
    794            * @}
    795            */
    796          
    797          /**
    798            * @}
    799            */ 
    800          
    801          /**
    802            * @}
    803            */
    804          
    805          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   USBH_MSC_ClassRequest
        16   -> USBH_ClrFeature
        16   -> USBH_MSC_BOT_REQ_GetMaxLUN
       8   USBH_MSC_GetLUNInfo
         8   -> memcpy
       0   USBH_MSC_GetMaxLUN
      16   USBH_MSC_InterfaceDeInit
        16   -> USBH_ClosePipe
        16   -> USBH_FreePipe
        16   -> free
      32   USBH_MSC_InterfaceInit
        32   -> USBH_AllocPipe
        32   -> USBH_FindInterface
        32   -> USBH_LL_SetToggle
        32   -> USBH_MSC_BOT_Init
        32   -> USBH_OpenPipe
        32   -> USBH_SelectInterface
        32   -> malloc
        32   -> memset
       0   USBH_MSC_IsReady
      24   USBH_MSC_Process
        24   -- Indirect call
        24   -> USBH_MSC_SCSI_Inquiry
        24   -> USBH_MSC_SCSI_ReadCapacity
        24   -> USBH_MSC_SCSI_RequestSense
        24   -> USBH_MSC_SCSI_TestUnitReady
      16   USBH_MSC_RdWrProcess
        16   -> USBH_MSC_SCSI_Read
        16   -> USBH_MSC_SCSI_RequestSense
        16   -> USBH_MSC_SCSI_Write
      32   USBH_MSC_Read
        32   -> USBH_MSC_RdWrProcess
        32   -> USBH_MSC_SCSI_Read
       0   USBH_MSC_SOFProcess
       0   USBH_MSC_UnitIsReady
      32   USBH_MSC_Write
        32   -> USBH_MSC_RdWrProcess
        32   -> USBH_MSC_SCSI_Write


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "MSC">
     106  USBH_MSC_ClassRequest
      42  USBH_MSC_GetLUNInfo
      34  USBH_MSC_GetMaxLUN
      84  USBH_MSC_InterfaceDeInit
     276  USBH_MSC_InterfaceInit
      34  USBH_MSC_IsReady
     550  USBH_MSC_Process
     128  USBH_MSC_RdWrProcess
     134  USBH_MSC_Read
       4  USBH_MSC_SOFProcess
      36  USBH_MSC_UnitIsReady
     134  USBH_MSC_Write
      32  USBH_msc

 
    32 bytes in section .data
     4 bytes in section .rodata
 1 562 bytes in section .text
 
 1 562 bytes of CODE  memory
     4 bytes of CONST memory
    32 bytes of DATA  memory

Errors: none
Warnings: none
