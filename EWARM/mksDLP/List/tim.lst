###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        18/Jul/2019  11:15:28
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  E:\DLP_Proj\DLP_source\branches\DLP_opensource\Src\tim.c
#    Command line =  
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\Src\tim.c -D
#        USE_HAL_DRIVER -D STM32F407xx -D STM32F40_41xxx -D USE_HAL_LIB -D
#        MKS_DLP_BOARD -D TFT35 -lC
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM\mksDLP/List\ -lA
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM\mksDLP/List\
#        --diag_suppress Pa050 -o
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM\mksDLP/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4F -e --char_is_signed --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Inc\ -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Src\ -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/BSP/Components/ssd2828\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/libstmf4\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/ConvertColor\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/ConvertMono\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/Core\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/Font\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/AntiAlias\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/GUIDemo\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/LCDDriver\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/MemDev\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/MultiLayer\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/Widget\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI/WM\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/GUI_X\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../Middlewares/gui/Config\
#        -I E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../User/ui\ -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../User/ui/Multi_language\
#        -I
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM\mksDLP/List\tim.lst
#    Object file  =  
#        E:\DLP_Proj\DLP_source\branches\DLP_opensource\EWARM\mksDLP/Obj\tim.o
#
###############################################################################

E:\DLP_Proj\DLP_source\branches\DLP_opensource\Src\tim.c
      1          /**
      2            ******************************************************************************
      3            * File Name          : TIM.c
      4            * Description        : This file provides code for the configuration
      5            *                      of the TIM instances.
      6            ******************************************************************************
      7            *
      8            * Copyright (c) 2016 STMicroelectronics International N.V. 
      9            * All rights reserved.
     10            *
     11            * Redistribution and use in source and binary forms, with or without 
     12            * modification, are permitted, provided that the following conditions are met:
     13            *
     14            * 1. Redistribution of source code must retain the above copyright notice, 
     15            *    this list of conditions and the following disclaimer.
     16            * 2. Redistributions in binary form must reproduce the above copyright notice,
     17            *    this list of conditions and the following disclaimer in the documentation
     18            *    and/or other materials provided with the distribution.
     19            * 3. Neither the name of STMicroelectronics nor the names of other 
     20            *    contributors to this software may be used to endorse or promote products 
     21            *    derived from this software without specific written permission.
     22            * 4. This software, including modifications and/or derivative works of this 
     23            *    software, must execute solely and exclusively on microcontroller or
     24            *    microprocessor devices manufactured by or for STMicroelectronics.
     25            * 5. Redistribution and use of this software other than as permitted under 
     26            *    this license is void and will automatically terminate your rights under 
     27            *    this license. 
     28            *
     29            * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
     30            * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
     31            * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
     32            * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
     33            * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
     34            * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
     35            * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     36            * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
     37            * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
     38            * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
     39            * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     40            * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     41            *
     42            ******************************************************************************
     43            */
     44          
     45          /* Includes ------------------------------------------------------------------*/
     46          #include "tim.h"
     47          #include "Mks_variant.h"
     48          /* USER CODE BEGIN 0 */

   \                                 In section .bss, align 4
     49          volatile uint32_t _dwTickCount=0 ;
   \                     _dwTickCount:
   \   00000000                      DS8 4
     50          

   \                                 In section .text, align 2, keep-with-next
     51          unsigned long millis()
     52          {
     53            return _dwTickCount ;
   \                     millis: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable8
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
     54          }
     55          

   \                                 In section .text, align 2, keep-with-next
     56          unsigned int   getTick()
     57          {
     58          	return _dwTickCount;
   \                     getTick: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable8
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
     59          	//return 0;
     60          }
     61          

   \                                 In section .text, align 2, keep-with-next
     62          unsigned int  getTickDiff(unsigned int curTick, unsigned int  lastTick)
     63          {
     64          	if(lastTick <= curTick)
   \                     getTickDiff: (+1)
   \   00000000   0x4288             CMP      R0,R1
   \   00000002   0xD301             BCC.N    ??getTickDiff_0
     65          	{
     66          		return (curTick - lastTick) * TICK_CYCLE;
   \   00000004   0x1A40             SUBS     R0,R0,R1
   \   00000006   0x4770             BX       LR
     67          	}
     68          	else
     69          	{
     70          		return (0xffffffff - lastTick + curTick) * TICK_CYCLE;
   \                     ??getTickDiff_0: (+1)
   \   00000008   0xF04F 0x32FF      MOV      R2,#-1
   \   0000000C   0x1A51             SUBS     R1,R2,R1
   \   0000000E   0x1840             ADDS     R0,R0,R1
   \   00000010   0x4770             BX       LR               ;; return
     71          	}
     72          }
     73          /* USER CODE END 0 */
     74          

   \                                 In section .bss, align 4
     75          TIM_HandleTypeDef htim2;
   \                     htim2:
   \   00000000                      DS8 60

   \                                 In section .bss, align 4
     76          TIM_HandleTypeDef htim3;
   \                     htim3:
   \   00000000                      DS8 60

   \                                 In section .bss, align 4
     77          TIM_HandleTypeDef htim4;
   \                     htim4:
   \   00000000                      DS8 60

   \                                 In section .bss, align 4
     78          TIM_HandleTypeDef htim5;
   \                     htim5:
   \   00000000                      DS8 60
     79          
     80          /* TIM2 init function */
     81          

   \                                 In section .text, align 2, keep-with-next
     82          void MX_TIM2_Init(void)
     83          {
   \                     MX_TIM2_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
     84            TIM_ClockConfigTypeDef sClockSourceConfig;
     85            TIM_MasterConfigTypeDef sMasterConfig;
     86          
     87            htim2.Instance = TIM2;
   \   00000004   0x....             LDR.N    R4,??DataTable8_1
   \   00000006   0xF04F 0x4080      MOV      R0,#+1073741824
   \   0000000A   0x6020             STR      R0,[R4, #+0]
     88            htim2.Init.Prescaler =TICK_TIMER_PRESCALER-1;
   \   0000000C   0x2029             MOVS     R0,#+41
   \   0000000E   0x6060             STR      R0,[R4, #+4]
     89            htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x60A0             STR      R0,[R4, #+8]
     90            htim2.Init.Period = 1000;    	//1000 = 1000us
   \   00000014   0xF44F 0x707A      MOV      R0,#+1000
   \   00000018   0x60E0             STR      R0,[R4, #+12]
     91            htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x6120             STR      R0,[R4, #+16]
     92            if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       HAL_TIM_Base_Init
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD001             BEQ.N    ??MX_TIM2_Init_0
     93            {
     94              Error_Handler();
   \   00000028   0x.... 0x....      BL       Error_Handler
     95            }
     96          
     97            sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
   \                     ??MX_TIM2_Init_0: (+1)
   \   0000002C   0xF44F 0x5080      MOV      R0,#+4096
   \   00000030   0x9002             STR      R0,[SP, #+8]
     98            if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
   \   00000032   0xA902             ADD      R1,SP,#+8
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0x.... 0x....      BL       HAL_TIM_ConfigClockSource
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD001             BEQ.N    ??MX_TIM2_Init_1
     99            {
    100              Error_Handler();
   \   0000003E   0x.... 0x....      BL       Error_Handler
    101            }
    102          
    103            sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
   \                     ??MX_TIM2_Init_1: (+1)
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x9000             STR      R0,[SP, #+0]
    104            sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
   \   00000046   0x9001             STR      R0,[SP, #+4]
    105            if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
   \   00000048   0xA900             ADD      R1,SP,#+0
   \   0000004A   0x4620             MOV      R0,R4
   \   0000004C   0x.... 0x....      BL       HAL_TIMEx_MasterConfigSynchronization
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD001             BEQ.N    ??MX_TIM2_Init_2
    106            {
    107              Error_Handler();
   \   00000054   0x.... 0x....      BL       Error_Handler
    108            }
    109          
    110          }
   \                     ??MX_TIM2_Init_2: (+1)
   \   00000058   0xB006             ADD      SP,SP,#+24
   \   0000005A   0xBD10             POP      {R4,PC}          ;; return
    111          /* TIM3 init function */

   \                                 In section .text, align 2, keep-with-next
    112          void MX_TIM3_Init(void)
    113          {
   \                     MX_TIM3_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    114            TIM_ClockConfigTypeDef sClockSourceConfig;
    115            TIM_MasterConfigTypeDef sMasterConfig;
    116            TIM_OC_InitTypeDef sConfigOC;
                                      ^
Warning[Pe177]: variable "sConfigOC" was declared but never referenced
    117          
    118            htim3.Instance = TIM3;
   \   00000004   0x....             LDR.N    R4,??DataTable8_2
   \   00000006   0x....             LDR.N    R0,??DataTable8_3  ;; 0x40000400
   \   00000008   0x6020             STR      R0,[R4, #+0]
    119            
    120          	htim3.Init.Prescaler = 41;	//Prescaler 41 Period 2000 T=1ms	 
   \   0000000A   0x2029             MOVS     R0,#+41
   \   0000000C   0x6060             STR      R0,[R4, #+4]
    121          
    122            htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x60A0             STR      R0,[R4, #+8]
    123            htim3.Init.Period = 1000;
   \   00000012   0xF44F 0x707A      MOV      R0,#+1000
   \   00000016   0x60E0             STR      R0,[R4, #+12]
    124            htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x6120             STR      R0,[R4, #+16]
    125            if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0x.... 0x....      BL       HAL_TIM_Base_Init
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD001             BEQ.N    ??MX_TIM3_Init_0
    126            {
    127              Error_Handler();
   \   00000026   0x.... 0x....      BL       Error_Handler
    128            }
    129          
    130            sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
   \                     ??MX_TIM3_Init_0: (+1)
   \   0000002A   0xF44F 0x5080      MOV      R0,#+4096
   \   0000002E   0x9002             STR      R0,[SP, #+8]
    131            if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
   \   00000030   0xA902             ADD      R1,SP,#+8
   \   00000032   0x4620             MOV      R0,R4
   \   00000034   0x.... 0x....      BL       HAL_TIM_ConfigClockSource
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD001             BEQ.N    ??MX_TIM3_Init_1
    132            {
    133              Error_Handler();
   \   0000003C   0x.... 0x....      BL       Error_Handler
    134            }
    135          
    136            if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
   \                     ??MX_TIM3_Init_1: (+1)
   \   00000040   0x4620             MOV      R0,R4
   \   00000042   0x.... 0x....      BL       HAL_TIM_PWM_Init
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD001             BEQ.N    ??MX_TIM3_Init_2
    137            {
    138              Error_Handler();
   \   0000004A   0x.... 0x....      BL       Error_Handler
    139            }
    140          
    141            sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
   \                     ??MX_TIM3_Init_2: (+1)
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x9000             STR      R0,[SP, #+0]
    142            sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
   \   00000052   0x9001             STR      R0,[SP, #+4]
    143            if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
   \   00000054   0xA900             ADD      R1,SP,#+0
   \   00000056   0x4620             MOV      R0,R4
   \   00000058   0x.... 0x....      BL       HAL_TIMEx_MasterConfigSynchronization
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD001             BEQ.N    ??MX_TIM3_Init_3
    144            {
    145              Error_Handler();
   \   00000060   0x.... 0x....      BL       Error_Handler
    146            }
    147          
    148          
    149          }
   \                     ??MX_TIM3_Init_3: (+1)
   \   00000064   0xB006             ADD      SP,SP,#+24
   \   00000066   0xBD10             POP      {R4,PC}          ;; return
    150          /* TIM4 init function */

   \                                 In section .text, align 2, keep-with-next
    151          void MX_TIM4_Init(void)
    152          {
   \                     MX_TIM4_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    153            TIM_ClockConfigTypeDef sClockSourceConfig;
    154            TIM_MasterConfigTypeDef sMasterConfig;
    155          
    156            htim4.Instance = TIM4;
   \   00000004   0x....             LDR.N    R4,??DataTable8_4
   \   00000006   0x....             LDR.N    R0,??DataTable8_5  ;; 0x40000800
   \   00000008   0x6020             STR      R0,[R4, #+0]
    157            htim4.Init.Prescaler = 42;
   \   0000000A   0x202A             MOVS     R0,#+42
   \   0000000C   0x6060             STR      R0,[R4, #+4]
    158            htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x60A0             STR      R0,[R4, #+8]
    159            htim4.Init.Period = 2000;
   \   00000012   0xF44F 0x60FA      MOV      R0,#+2000
   \   00000016   0x60E0             STR      R0,[R4, #+12]
    160            htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x6120             STR      R0,[R4, #+16]
    161            if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0x.... 0x....      BL       HAL_TIM_Base_Init
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD001             BEQ.N    ??MX_TIM4_Init_0
    162            {
    163              Error_Handler();
   \   00000026   0x.... 0x....      BL       Error_Handler
    164            }
    165          
    166            sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
   \                     ??MX_TIM4_Init_0: (+1)
   \   0000002A   0xF44F 0x5080      MOV      R0,#+4096
   \   0000002E   0x9002             STR      R0,[SP, #+8]
    167            if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
   \   00000030   0xA902             ADD      R1,SP,#+8
   \   00000032   0x4620             MOV      R0,R4
   \   00000034   0x.... 0x....      BL       HAL_TIM_ConfigClockSource
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD001             BEQ.N    ??MX_TIM4_Init_1
    168            {
    169              Error_Handler();
   \   0000003C   0x.... 0x....      BL       Error_Handler
    170            }
    171          
    172            sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
   \                     ??MX_TIM4_Init_1: (+1)
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x9000             STR      R0,[SP, #+0]
    173            sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
   \   00000044   0x9001             STR      R0,[SP, #+4]
    174            if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
   \   00000046   0xA900             ADD      R1,SP,#+0
   \   00000048   0x4620             MOV      R0,R4
   \   0000004A   0x.... 0x....      BL       HAL_TIMEx_MasterConfigSynchronization
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD001             BEQ.N    ??MX_TIM4_Init_2
    175            {
    176              Error_Handler();
   \   00000052   0x.... 0x....      BL       Error_Handler
    177            }
    178          
    179          }
   \                     ??MX_TIM4_Init_2: (+1)
   \   00000056   0xB006             ADD      SP,SP,#+24
   \   00000058   0xBD10             POP      {R4,PC}          ;; return
    180          /* TIM5 init function */

   \                                 In section .text, align 2, keep-with-next
    181          void MX_TIM5_Init(void)
    182          {
   \                     MX_TIM5_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08E             SUB      SP,SP,#+56
    183            TIM_ClockConfigTypeDef sClockSourceConfig;
    184            TIM_MasterConfigTypeDef sMasterConfig;
    185            TIM_OC_InitTypeDef sConfigOC;
    186          
    187            htim5.Instance = TIM5;
   \   00000004   0x....             LDR.N    R4,??DataTable8_6
   \   00000006   0x....             LDR.N    R0,??DataTable8_7  ;; 0x40000c00
   \   00000008   0x6020             STR      R0,[R4, #+0]
    188            htim5.Init.Prescaler = 2;
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0x6060             STR      R0,[R4, #+4]
    189            htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x60A0             STR      R0,[R4, #+8]
    190            htim5.Init.Period = 749;
   \   00000012   0xF240 0x20ED      MOVW     R0,#+749
   \   00000016   0x60E0             STR      R0,[R4, #+12]
    191            htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x6120             STR      R0,[R4, #+16]
    192            if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0x.... 0x....      BL       HAL_TIM_Base_Init
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD001             BEQ.N    ??MX_TIM5_Init_0
    193            {
    194              Error_Handler();
   \   00000026   0x.... 0x....      BL       Error_Handler
    195            }
    196          
    197            sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
   \                     ??MX_TIM5_Init_0: (+1)
   \   0000002A   0xF44F 0x5080      MOV      R0,#+4096
   \   0000002E   0x9009             STR      R0,[SP, #+36]
    198            if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
   \   00000030   0xA909             ADD      R1,SP,#+36
   \   00000032   0x4620             MOV      R0,R4
   \   00000034   0x.... 0x....      BL       HAL_TIM_ConfigClockSource
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD001             BEQ.N    ??MX_TIM5_Init_1
    199            {
    200              Error_Handler();
   \   0000003C   0x.... 0x....      BL       Error_Handler
    201            }
    202          
    203            if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
   \                     ??MX_TIM5_Init_1: (+1)
   \   00000040   0x4620             MOV      R0,R4
   \   00000042   0x.... 0x....      BL       HAL_TIM_PWM_Init
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD001             BEQ.N    ??MX_TIM5_Init_2
    204          	  {
    205          		Error_Handler();
   \   0000004A   0x.... 0x....      BL       Error_Handler
    206          	  }
    207          
    208            sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
   \                     ??MX_TIM5_Init_2: (+1)
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x9000             STR      R0,[SP, #+0]
    209            sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
   \   00000052   0x9001             STR      R0,[SP, #+4]
    210            if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
   \   00000054   0xA900             ADD      R1,SP,#+0
   \   00000056   0x4620             MOV      R0,R4
   \   00000058   0x.... 0x....      BL       HAL_TIMEx_MasterConfigSynchronization
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD001             BEQ.N    ??MX_TIM5_Init_3
    211            {
    212              Error_Handler();
   \   00000060   0x.... 0x....      BL       Error_Handler
    213            }
    214          
    215          	sConfigOC.OCMode = TIM_OCMODE_PWM1;
   \                     ??MX_TIM5_Init_3: (+1)
   \   00000064   0x2060             MOVS     R0,#+96
   \   00000066   0x9002             STR      R0,[SP, #+8]
    216          	sConfigOC.Pulse = 0;
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x9003             STR      R0,[SP, #+12]
    217          	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
   \   0000006C   0x9004             STR      R0,[SP, #+16]
    218          	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
   \   0000006E   0x9006             STR      R0,[SP, #+24]
    219          	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
   \   00000070   0x4602             MOV      R2,R0
   \   00000072   0xA902             ADD      R1,SP,#+8
   \   00000074   0x4620             MOV      R0,R4
   \   00000076   0x.... 0x....      BL       HAL_TIM_PWM_ConfigChannel
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xD001             BEQ.N    ??MX_TIM5_Init_4
    220          	{
    221          	  Error_Handler();
   \   0000007E   0x.... 0x....      BL       Error_Handler
    222          	}
    223          
    224          	HAL_TIM_MspPostInit(&htim5);
   \                     ??MX_TIM5_Init_4: (+1)
   \   00000082   0x4620             MOV      R0,R4
   \   00000084   0x.... 0x....      BL       HAL_TIM_MspPostInit
    225          
    226          
    227          }
   \   00000088   0xB00E             ADD      SP,SP,#+56
   \   0000008A   0xBD10             POP      {R4,PC}          ;; return
    228          

   \                                 In section .text, align 2, keep-with-next
    229          void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
    230          {
   \                     HAL_TIM_Base_MspInit: (+1)
   \   00000000   0xB081             SUB      SP,SP,#+4
    231          
    232            if(tim_baseHandle->Instance==TIM2)
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF1B0 0x4F80      CMP      R0,#+1073741824
   \   00000008   0xD10C             BNE.N    ??HAL_TIM_Base_MspInit_0
    233            {
    234            /* USER CODE BEGIN TIM2_MspInit 0 */
    235          
    236            /* USER CODE END TIM2_MspInit 0 */
    237              /* Peripheral clock enable */
    238              __HAL_RCC_TIM2_CLK_ENABLE();
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   \   0000000E   0x....             LDR.N    R0,??DataTable8_8  ;; 0x40023840
   \   00000010   0x6801             LDR      R1,[R0, #+0]
   \   00000012   0xF041 0x0101      ORR      R1,R1,#0x1
   \   00000016   0x6001             STR      R1,[R0, #+0]
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF000 0x0001      AND      R0,R0,#0x1
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0x9800             LDR      R0,[SP, #+0]
   \   00000022   0xE02E             B.N      ??HAL_TIM_Base_MspInit_1
    239            /* USER CODE BEGIN TIM2_MspInit 1 */
    240          
    241            /* USER CODE END TIM2_MspInit 1 */
    242            }
    243            else if(tim_baseHandle->Instance==TIM3)
   \                     ??HAL_TIM_Base_MspInit_0: (+1)
   \   00000024   0x....             LDR.N    R1,??DataTable8_3  ;; 0x40000400
   \   00000026   0x4288             CMP      R0,R1
   \   00000028   0xD10C             BNE.N    ??HAL_TIM_Base_MspInit_2
    244            {
    245            /* USER CODE BEGIN TIM3_MspInit 0 */
    246          
    247            /* USER CODE END TIM3_MspInit 0 */
    248              /* Peripheral clock enable */
    249              __HAL_RCC_TIM3_CLK_ENABLE();
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x9000             STR      R0,[SP, #+0]
   \   0000002E   0x....             LDR.N    R0,??DataTable8_8  ;; 0x40023840
   \   00000030   0x6801             LDR      R1,[R0, #+0]
   \   00000032   0xF041 0x0102      ORR      R1,R1,#0x2
   \   00000036   0x6001             STR      R1,[R0, #+0]
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0xF000 0x0002      AND      R0,R0,#0x2
   \   0000003E   0x9000             STR      R0,[SP, #+0]
   \   00000040   0x9800             LDR      R0,[SP, #+0]
   \   00000042   0xE01E             B.N      ??HAL_TIM_Base_MspInit_1
    250            /* USER CODE BEGIN TIM3_MspInit 1 */
    251          
    252            /* USER CODE END TIM3_MspInit 1 */
    253            }
    254            else if(tim_baseHandle->Instance==TIM4)
   \                     ??HAL_TIM_Base_MspInit_2: (+1)
   \   00000044   0x....             LDR.N    R1,??DataTable8_5  ;; 0x40000800
   \   00000046   0x4288             CMP      R0,R1
   \   00000048   0xD10C             BNE.N    ??HAL_TIM_Base_MspInit_3
    255            {
    256            /* USER CODE BEGIN TIM4_MspInit 0 */
    257          
    258            /* USER CODE END TIM4_MspInit 0 */
    259              /* Peripheral clock enable */
    260              __HAL_RCC_TIM4_CLK_ENABLE();
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x9000             STR      R0,[SP, #+0]
   \   0000004E   0x....             LDR.N    R0,??DataTable8_8  ;; 0x40023840
   \   00000050   0x6801             LDR      R1,[R0, #+0]
   \   00000052   0xF041 0x0104      ORR      R1,R1,#0x4
   \   00000056   0x6001             STR      R1,[R0, #+0]
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0xF000 0x0004      AND      R0,R0,#0x4
   \   0000005E   0x9000             STR      R0,[SP, #+0]
   \   00000060   0x9800             LDR      R0,[SP, #+0]
   \   00000062   0xE00E             B.N      ??HAL_TIM_Base_MspInit_1
    261            /* USER CODE BEGIN TIM4_MspInit 1 */
    262          
    263            /* USER CODE END TIM4_MspInit 1 */
    264            }
    265            else if(tim_baseHandle->Instance==TIM5)
   \                     ??HAL_TIM_Base_MspInit_3: (+1)
   \   00000064   0x....             LDR.N    R1,??DataTable8_7  ;; 0x40000c00
   \   00000066   0x4288             CMP      R0,R1
   \   00000068   0xD10B             BNE.N    ??HAL_TIM_Base_MspInit_1
    266            {
    267            /* USER CODE BEGIN TIM5_MspInit 0 */
    268          
    269            /* USER CODE END TIM5_MspInit 0 */
    270              /* Peripheral clock enable */
    271              __HAL_RCC_TIM5_CLK_ENABLE();
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x9000             STR      R0,[SP, #+0]
   \   0000006E   0x....             LDR.N    R0,??DataTable8_8  ;; 0x40023840
   \   00000070   0x6801             LDR      R1,[R0, #+0]
   \   00000072   0xF041 0x0108      ORR      R1,R1,#0x8
   \   00000076   0x6001             STR      R1,[R0, #+0]
   \   00000078   0x6800             LDR      R0,[R0, #+0]
   \   0000007A   0xF000 0x0008      AND      R0,R0,#0x8
   \   0000007E   0x9000             STR      R0,[SP, #+0]
   \   00000080   0x9800             LDR      R0,[SP, #+0]
    272            /* USER CODE BEGIN TIM5_MspInit 1 */
    273          
    274            /* USER CODE END TIM5_MspInit 1 */
    275            }
    276          }
   \                     ??HAL_TIM_Base_MspInit_1: (+1)
   \   00000082   0xB001             ADD      SP,SP,#+4
   \   00000084   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
    277          void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
    278          {
    279          
    280            GPIO_InitTypeDef GPIO_InitStruct;
    281            if(timHandle->Instance==TIM5)
   \                     HAL_TIM_MspPostInit: (+1)
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0x....             LDR.N    R1,??DataTable8_7  ;; 0x40000c00
   \   00000004   0x4288             CMP      R0,R1
   \   00000006   0xD000             BEQ.N    ??HAL_TIM_MspPostInit_0
   \   00000008   0x4770             BX       LR
    282            {
    283            /* USER CODE BEGIN TIM5_MspPostInit 0 */
    284          
    285            /* USER CODE END TIM5_MspPostInit 0 */
    286            
    287              /**TIM5 GPIO Configuration    
    288              PA0-WKUP     ------> TIM5_CH1 
    289              */
    290              GPIO_InitStruct.Pin = Z_VREF_Pin;
   \                     ??HAL_TIM_MspPostInit_0: (+1)
   \   0000000A   0xB500             PUSH     {LR}
   \   0000000C   0xB085             SUB      SP,SP,#+20
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x9000             STR      R0,[SP, #+0]
    291              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \   00000012   0x2002             MOVS     R0,#+2
   \   00000014   0x9001             STR      R0,[SP, #+4]
    292              GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x9002             STR      R0,[SP, #+8]
    293              GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
   \   0000001A   0x9003             STR      R0,[SP, #+12]
    294              GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x9004             STR      R0,[SP, #+16]
    295              HAL_GPIO_Init(Z_VREF_GPIO_Port, &GPIO_InitStruct);
   \   00000020   0xA900             ADD      R1,SP,#+0
   \   00000022   0x....             LDR.N    R0,??DataTable8_9  ;; 0x40020000
   \   00000024   0x.... 0x....      BL       HAL_GPIO_Init
    296          
    297            /* USER CODE BEGIN TIM5_MspPostInit 1 */
    298          
    299            /* USER CODE END TIM5_MspPostInit 1 */
    300            }
    301            
    302          
    303          }
   \   00000028   0xB005             ADD      SP,SP,#+20
   \   0000002A   0xBD00             POP      {PC}             ;; return
    304          

   \                                 In section .text, align 2, keep-with-next
    305          void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
    306          {
    307          
    308            if(tim_baseHandle->Instance==TIM2)
   \                     HAL_TIM_Base_MspDeInit: (+1)
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0xF1B0 0x4F80      CMP      R0,#+1073741824
   \   00000006   0xD107             BNE.N    ??HAL_TIM_Base_MspDeInit_0
    309            {
    310            /* USER CODE BEGIN TIM2_MspDeInit 0 */
    311          
    312            /* USER CODE END TIM2_MspDeInit 0 */
    313              /* Peripheral clock disable */
    314              __HAL_RCC_TIM2_CLK_DISABLE();
   \   00000008   0x....             LDR.N    R0,??DataTable8_8  ;; 0x40023840
   \   0000000A   0x6801             LDR      R1,[R0, #+0]
   \   0000000C   0x0849             LSRS     R1,R1,#+1
   \   0000000E   0x0049             LSLS     R1,R1,#+1
   \   00000010   0x6001             STR      R1,[R0, #+0]
    315          
    316              /* Peripheral interrupt Deinit*/
    317              HAL_NVIC_DisableIRQ(TIM2_IRQn);
   \   00000012   0x201C             MOVS     R0,#+28
   \   00000014   0x.... 0x....      B.W      HAL_NVIC_DisableIRQ
    318          
    319            /* USER CODE BEGIN TIM2_MspDeInit 1 */
    320          
    321            /* USER CODE END TIM2_MspDeInit 1 */
    322            }
    323            else if(tim_baseHandle->Instance==TIM3)
   \                     ??HAL_TIM_Base_MspDeInit_0: (+1)
   \   00000018   0x....             LDR.N    R1,??DataTable8_3  ;; 0x40000400
   \   0000001A   0x4288             CMP      R0,R1
   \   0000001C   0xD107             BNE.N    ??HAL_TIM_Base_MspDeInit_1
    324            {
    325            /* USER CODE BEGIN TIM3_MspDeInit 0 */
    326          
    327            /* USER CODE END TIM3_MspDeInit 0 */
    328              /* Peripheral clock disable */
    329              __HAL_RCC_TIM3_CLK_DISABLE();
   \   0000001E   0x....             LDR.N    R0,??DataTable8_8  ;; 0x40023840
   \   00000020   0x6801             LDR      R1,[R0, #+0]
   \   00000022   0xF021 0x0102      BIC      R1,R1,#0x2
   \   00000026   0x6001             STR      R1,[R0, #+0]
    330          
    331              /* Peripheral interrupt Deinit*/
    332              HAL_NVIC_DisableIRQ(TIM3_IRQn);
   \   00000028   0x201D             MOVS     R0,#+29
   \   0000002A   0x.... 0x....      B.W      HAL_NVIC_DisableIRQ
    333          
    334            /* USER CODE BEGIN TIM3_MspDeInit 1 */
    335          
    336            /* USER CODE END TIM3_MspDeInit 1 */
    337            }
    338            else if(tim_baseHandle->Instance==TIM4)
   \                     ??HAL_TIM_Base_MspDeInit_1: (+1)
   \   0000002E   0x....             LDR.N    R1,??DataTable8_5  ;; 0x40000800
   \   00000030   0x4288             CMP      R0,R1
   \   00000032   0xD107             BNE.N    ??HAL_TIM_Base_MspDeInit_2
    339            {
    340            /* USER CODE BEGIN TIM4_MspDeInit 0 */
    341          
    342            /* USER CODE END TIM4_MspDeInit 0 */
    343              /* Peripheral clock disable */
    344              __HAL_RCC_TIM4_CLK_DISABLE();
   \   00000034   0x....             LDR.N    R0,??DataTable8_8  ;; 0x40023840
   \   00000036   0x6801             LDR      R1,[R0, #+0]
   \   00000038   0xF021 0x0104      BIC      R1,R1,#0x4
   \   0000003C   0x6001             STR      R1,[R0, #+0]
    345          
    346              /* Peripheral interrupt Deinit*/
    347              HAL_NVIC_DisableIRQ(TIM4_IRQn);
   \   0000003E   0x201E             MOVS     R0,#+30
   \   00000040   0x.... 0x....      B.W      HAL_NVIC_DisableIRQ
    348          
    349            /* USER CODE BEGIN TIM4_MspDeInit 1 */
    350          
    351            /* USER CODE END TIM4_MspDeInit 1 */
    352            }
    353            else if(tim_baseHandle->Instance==TIM5)
   \                     ??HAL_TIM_Base_MspDeInit_2: (+1)
   \   00000044   0x....             LDR.N    R1,??DataTable8_7  ;; 0x40000c00
   \   00000046   0x4288             CMP      R0,R1
   \   00000048   0xD107             BNE.N    ??HAL_TIM_Base_MspDeInit_3
    354            {
    355            /* USER CODE BEGIN TIM5_MspDeInit 0 */
    356          
    357            /* USER CODE END TIM5_MspDeInit 0 */
    358              /* Peripheral clock disable */
    359              __HAL_RCC_TIM5_CLK_DISABLE();
   \   0000004A   0x....             LDR.N    R0,??DataTable8_8  ;; 0x40023840
   \   0000004C   0x6801             LDR      R1,[R0, #+0]
   \   0000004E   0xF021 0x0108      BIC      R1,R1,#0x8
   \   00000052   0x6001             STR      R1,[R0, #+0]
    360          
    361              /* Peripheral interrupt Deinit*/
    362              HAL_NVIC_DisableIRQ(TIM5_IRQn);
   \   00000054   0x2032             MOVS     R0,#+50
   \   00000056   0x.... 0x....      B.W      HAL_NVIC_DisableIRQ
    363          
    364            /* USER CODE BEGIN TIM5_MspDeInit 1 */
    365          
    366            /* USER CODE END TIM5_MspDeInit 1 */
    367            }
    368          } 
   \                     ??HAL_TIM_Base_MspDeInit_3: (+1)
   \   0000005A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     _dwTickCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     htim2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     htim3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x40000400         DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x........         DC32     htim4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x40000800         DC32     0x40000800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x........         DC32     htim5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x40000C00         DC32     0x40000c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x40023840         DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   0x40020000         DC32     0x40020000
    369          
    370          /* USER CODE BEGIN 1 */
    371          
    372          /* USER CODE END 1 */
    373          
    374          /**
    375            * @}
    376            */
    377          
    378          /**
    379            * @}
    380            */
    381          
    382          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   HAL_TIM_Base_MspDeInit
         0   -> HAL_NVIC_DisableIRQ
       4   HAL_TIM_Base_MspInit
      24   HAL_TIM_MspPostInit
        24   -> HAL_GPIO_Init
      32   MX_TIM2_Init
        32   -> Error_Handler
        32   -> HAL_TIMEx_MasterConfigSynchronization
        32   -> HAL_TIM_Base_Init
        32   -> HAL_TIM_ConfigClockSource
      32   MX_TIM3_Init
        32   -> Error_Handler
        32   -> HAL_TIMEx_MasterConfigSynchronization
        32   -> HAL_TIM_Base_Init
        32   -> HAL_TIM_ConfigClockSource
        32   -> HAL_TIM_PWM_Init
      32   MX_TIM4_Init
        32   -> Error_Handler
        32   -> HAL_TIMEx_MasterConfigSynchronization
        32   -> HAL_TIM_Base_Init
        32   -> HAL_TIM_ConfigClockSource
      64   MX_TIM5_Init
        64   -> Error_Handler
        64   -> HAL_TIMEx_MasterConfigSynchronization
        64   -> HAL_TIM_Base_Init
        64   -> HAL_TIM_ConfigClockSource
        64   -> HAL_TIM_MspPostInit
        64   -> HAL_TIM_PWM_ConfigChannel
        64   -> HAL_TIM_PWM_Init
       0   getTick
       0   getTickDiff
       0   millis


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
      92  HAL_TIM_Base_MspDeInit
     134  HAL_TIM_Base_MspInit
      44  HAL_TIM_MspPostInit
      92  MX_TIM2_Init
     104  MX_TIM3_Init
      90  MX_TIM4_Init
     140  MX_TIM5_Init
       4  _dwTickCount
       6  getTick
      18  getTickDiff
      60  htim2
      60  htim3
      60  htim4
      60  htim5
       6  millis

 
 244 bytes in section .bss
 766 bytes in section .text
 
 766 bytes of CODE memory
 244 bytes of DATA memory

Errors: none
Warnings: 1
